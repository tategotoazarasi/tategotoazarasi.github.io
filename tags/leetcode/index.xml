<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>leetcode on Harp Seal Pup Nursery and Caring Center</title><link>https://tategotoazarasi.github.io/tags/leetcode/</link><description>Recent content in leetcode on Harp Seal Pup Nursery and Caring Center</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 05 Feb 2024 12:37:10 +0000</lastBuildDate><atom:link href="https://tategotoazarasi.github.io/tags/leetcode/index.xml" rel="self" type="application/rss+xml"/><item><title>LeetCode 127. 单词接龙</title><link>https://tategotoazarasi.github.io/post/word-ladder/</link><pubDate>Tue, 03 Jan 2023 14:52:48 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/word-ladder/</guid><description>&lt;p>字典  &lt;code>wordList&lt;/code> 中从单词 &lt;code>beginWord&lt;/code>和 &lt;code>endWord&lt;/code> 的&lt;strong>转换序列&lt;/strong>是一个按下述规格形成的序列&lt;/p>
&lt;p>\(beginWord \to s_1 \to s_2 \to \dots \to s_k\)：&lt;/p>
&lt;ul>
&lt;li>每一对相邻的单词只差一个字母。&lt;/li>
&lt;li>对于  &lt;code>1 &amp;lt;= i &amp;lt;= k&lt;/code>  时，每个 \(s_i\)  都在&lt;code>wordList&lt;/code>  中。注意， &lt;code>beginWord&lt;/code> 不需要在&lt;code>wordList&lt;/code>  中。&lt;/li>
&lt;li>\(s_k == endWord\)&lt;/li>
&lt;/ul>
&lt;p>给你两个单词 &lt;code>beginWord&lt;/code>和 &lt;code>endWord&lt;/code> 和一个字典 &lt;code>wordList&lt;/code> ，返回从  &lt;code>beginWord&lt;/code> 到  &lt;code>endWord&lt;/code> 的&lt;strong>最短转换序列&lt;/strong>中的&lt;strong>单词数目&lt;/strong>。如果不存在这样的转换序列，返回 &lt;code>0&lt;/code> 。&lt;/p></description></item><item><title>LeetCode 324. 摆动排序 II</title><link>https://tategotoazarasi.github.io/post/wiggle-sort-ii/</link><pubDate>Sun, 01 Jan 2023 17:10:05 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/wiggle-sort-ii/</guid><description>&lt;p>给你一个整数数组  &lt;code>nums&lt;/code>，将它重新排列成  &lt;code>nums[0] &amp;lt; nums[1] &amp;gt; nums[2] &amp;lt; nums[3]...&lt;/code>  的顺序。&lt;/p>
&lt;p>你可以假设所有输入数组都可以得到满足题目要求的结果。&lt;/p></description></item><item><title>LeetCode 212. 单词搜索 II</title><link>https://tategotoazarasi.github.io/post/word-search-ii/</link><pubDate>Tue, 27 Dec 2022 15:20:42 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/word-search-ii/</guid><description>&lt;p>给定一个  &lt;code>m x n&lt;/code> 二维字符网格  &lt;code>board&lt;/code> 和一个单词（字符串）列表&lt;code>words&lt;/code>，&lt;em>返回所有二维网格上的单词&lt;/em> 。&lt;/p>
&lt;p>单词必须按照字母顺序，通过 &lt;strong>相邻的单元格&lt;/strong>内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母在一个单词中不允许被重复使用。&lt;/p></description></item><item><title>LeetCode 218. 天际线问题</title><link>https://tategotoazarasi.github.io/post/the-skyline-problem/</link><pubDate>Sun, 25 Dec 2022 20:56:06 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/the-skyline-problem/</guid><description>&lt;p>城市的 &lt;strong>天际线&lt;/strong>是从远处观看该城市中所有建筑物形成的轮廓的外部轮廓。给你所有建筑物的位置和高度，请返回 *由这些建筑物形成的 &lt;strong>天际线*&lt;/strong> 。&lt;/p></description></item><item><title>LeetCode 1579. 保证图可完全遍历</title><link>https://tategotoazarasi.github.io/post/remove-max-number-of-edges-to-keep-graph-fully-traversable/</link><pubDate>Sat, 24 Dec 2022 20:10:04 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/remove-max-number-of-edges-to-keep-graph-fully-traversable/</guid><description>&lt;p>Alice 和 Bob 共有一个无向图，其中包含 n 个节点和 3  种类型的边：&lt;/p>
&lt;ul>
&lt;li>类型 1：只能由 Alice 遍历。&lt;/li>
&lt;li>类型 2：只能由 Bob 遍历。&lt;/li>
&lt;li>类型 3：Alice 和 Bob 都可以遍历。&lt;/li>
&lt;/ul>
&lt;p>给你一个数组 &lt;code>edges&lt;/code> ，其中\(edges[i] = [type_i, u_i, v_i]\)  表示节点\(u_i\)和 \( v_i\) 之间存在类型为 \(type_i\) 的双向边。请你在保证图仍能够被 Alice 和 Bob 完全遍历的前提下，找出可以删除的最大边数。如果从任何节点开始，Alice 和 Bob 都可以到达所有其他节点，则认为图是可以完全遍历的。&lt;/p>
&lt;p>返回可以删除的最大边数，如果 Alice 和 Bob 无法完全遍历图，则返回 -1 。&lt;/p></description></item><item><title>LeetCode 862. 和至少为 K 的最短子数组</title><link>https://tategotoazarasi.github.io/post/shortest-subarray-with-sum-at-least-k/</link><pubDate>Wed, 21 Dec 2022 21:15:00 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/shortest-subarray-with-sum-at-least-k/</guid><description>&lt;p>给你一个整数数组 &lt;code>nums&lt;/code> 和一个整数 &lt;code>k&lt;/code> ，找出 &lt;code>nums&lt;/code> 中和至少为 &lt;code>k&lt;/code> 的
&lt;strong>最短非空子数组&lt;/strong> ，并返回该子数组的长度。如果不存在这样的 &lt;strong>子数组&lt;/strong>
，返回 &lt;code>-1&lt;/code> 。&lt;/p></description></item><item><title>LeetCode 84. 柱状图中最大的矩形</title><link>https://tategotoazarasi.github.io/post/largest-rectangle-in-histogram/</link><pubDate>Wed, 21 Dec 2022 19:22:16 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/largest-rectangle-in-histogram/</guid><description>&lt;p>给定 &lt;em>n&lt;/em>个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1。&lt;/p>
&lt;p>求在该柱状图中，能够勾勒出来的矩形的最大面积。&lt;/p></description></item><item><title>LeetCode 456. 132 模式</title><link>https://tategotoazarasi.github.io/post/132-pattern/</link><pubDate>Wed, 21 Dec 2022 18:14:26 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/132-pattern/</guid><description>&lt;p>给你一个整数数组 &lt;code>nums&lt;/code> ，数组中共有 &lt;code>n&lt;/code> 个整数。&lt;strong>132 模式的子序列&lt;/strong>由三个整数 &lt;code>nums[i]&lt;/code>、&lt;code>nums[j]&lt;/code> 和 &lt;code>nums[k]&lt;/code>组成，并同时满足：&lt;code>i &amp;lt; j &amp;lt; k&lt;/code> 和 &lt;code>nums[i] &amp;lt; nums[k] &amp;lt; nums[j]&lt;/code> 。&lt;/p>
&lt;p>如果 &lt;code>nums&lt;/code> 中存在 &lt;strong>132 模式的子序列&lt;/strong> ，返回 &lt;code>true&lt;/code> ；否则，返回&lt;code>false&lt;/code> 。&lt;/p></description></item><item><title>LeetCode 214. 最短回文串</title><link>https://tategotoazarasi.github.io/post/shortest-palindrome/</link><pubDate>Tue, 06 Dec 2022 17:19:35 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/shortest-palindrome/</guid><description>&lt;p>给定一个字符串&lt;strong>s&lt;/strong>，你可以通过在字符串前面添加字符将其转换为回文串。找到并返回可以用这种方式转换的最短回文串。&lt;/p></description></item><item><title>LeetCode 44. 通配符匹配</title><link>https://tategotoazarasi.github.io/post/wildcard-matching/</link><pubDate>Tue, 06 Dec 2022 14:03:07 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/wildcard-matching/</guid><description>&lt;p>给定一个字符串  (&lt;code>s&lt;/code>) 和一个字符模式  (&lt;code>p&lt;/code>)，实现一个支持  &lt;code>'?'&lt;/code>  和  &lt;code>'*'&lt;/code>  的通配符匹配。&lt;/p></description></item><item><title>LeetCode 452. 用最少数量的箭引爆气球</title><link>https://tategotoazarasi.github.io/post/minimum-number-of-arrows-to-burst-balloons/</link><pubDate>Fri, 02 Dec 2022 15:26:34 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/minimum-number-of-arrows-to-burst-balloons/</guid><description>&lt;p>有一些球形气球贴在一堵用 XY 平面表示的墙面上。墙面上的气球记录在整数数组  &lt;code>points&lt;/code> ，其中 \(points[i] = [x_{start}, x_{end}]\)  表示水平直径在  \(x*{start}\)  和 \(x*{end}\)之间的气球。你不知道气球的确切 y 坐标。&lt;/p>
&lt;p>一支弓箭可以沿着 x 轴从不同点 &lt;strong>完全垂直&lt;/strong> 地射出。在坐标 &lt;code>x&lt;/code>处射出一支箭，若有一个气球的直径的开始和结束坐标为 \(x*{start}\)，\(x*{end}\)， 且满足  \(x*{start} ≤ x ≤ x*{end}\)，则该气球会被&lt;strong>引爆&lt;/strong>。可以射出的弓箭的数量 &lt;strong>没有限制&lt;/strong> 。弓箭一旦被射出之后，可以无限地前进。&lt;/p>
&lt;p>给你一个数组 &lt;code>points&lt;/code> ，返回引爆所有气球所必须射出的 &lt;strong>最小&lt;/strong>弓箭数。&lt;/p></description></item><item><title>LeetCode 1588. 所有奇数长度子数组的和</title><link>https://tategotoazarasi.github.io/post/sum-of-all-odd-length-subarrays/</link><pubDate>Fri, 02 Dec 2022 14:13:41 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/sum-of-all-odd-length-subarrays/</guid><description>&lt;p>给你一个正整数数组 &lt;code>arr&lt;/code> ，请你计算所有可能的奇数长度子数组的和。&lt;/p>
&lt;p>&lt;strong>子数组&lt;/strong> 定义为原数组中的一个连续子序列。&lt;/p>
&lt;p>请你返回 &lt;code>arr&lt;/code> 中 &lt;strong>所有奇数长度子数组的和&lt;/strong> 。&lt;/p></description></item><item><title>LeetCode 41. 缺失的第一个正数</title><link>https://tategotoazarasi.github.io/post/first-missing-positive/</link><pubDate>Fri, 23 Sep 2022 12:33:32 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/first-missing-positive/</guid><description>&lt;p>给你一个未排序的整数数组 &lt;code>nums&lt;/code> ，请你找出其中没有出现的最小的正整数。&lt;/p></description></item><item><title>LeetCode 715. Range 模块</title><link>https://tategotoazarasi.github.io/post/range-module/</link><pubDate>Mon, 19 Sep 2022 21:11:46 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/range-module/</guid><description>&lt;p>Range 模块是跟踪数字范围的模块。设计一个数据结构来跟踪表示为 &lt;strong>半开区间&lt;/strong>的范围并查询它们。&lt;/p>
&lt;p>&lt;strong>半开区间&lt;/strong> &lt;code>[left, right)&lt;/code>  表示所有  &lt;code>left &amp;lt;= x &amp;lt; right&lt;/code>  的实数 &lt;code>x&lt;/code> 。&lt;/p>
&lt;p>实现 &lt;code>RangeModule&lt;/code> 类:&lt;/p>
&lt;ul>
&lt;li>&lt;code>RangeModule()&lt;/code>  初始化数据结构的对象。&lt;/li>
&lt;li>&lt;code>void addRange(int left, int right)&lt;/code> 添加 &lt;strong>半开区间&lt;/strong> &lt;code>[left, right)&lt;/code>，跟踪该区间中的每个实数。添加与当前跟踪的数字部分重叠的区间时，应当添加在区间  &lt;code>[left, right)&lt;/code>  中尚未跟踪的任何数字到该区间中。&lt;/li>
&lt;li>&lt;code>boolean queryRange(int left, int right)&lt;/code>  只有在当前正在跟踪区间  &lt;code>[left, right)&lt;/code>  中的每一个实数时，才返回&lt;code>true&lt;/code> ，否则返回 &lt;code>false&lt;/code> 。&lt;/li>
&lt;li>&lt;code>void removeRange(int left, int right)&lt;/code>  停止跟踪
&lt;strong>半开区间&lt;/strong> &lt;code>[left, right)&lt;/code>  中当前正在跟踪的每个实数。&lt;/li>
&lt;/ul></description></item><item><title>LeetCode 995. K 连续位的最小翻转次数</title><link>https://tategotoazarasi.github.io/post/minimum-number-of-k-consecutive-bit-flips/</link><pubDate>Mon, 19 Sep 2022 18:54:07 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/minimum-number-of-k-consecutive-bit-flips/</guid><description>&lt;p>给定一个二进制数组 &lt;code>nums&lt;/code> 和一个整数 &lt;code>k&lt;/code> 。&lt;/p>
&lt;p>&lt;strong>k 位翻转&lt;/strong> 就是从 &lt;code>nums&lt;/code> 中选择一个长度为 &lt;code>k&lt;/code> 的 &lt;strong>子数组&lt;/strong>，同时把子数组中的每一个 &lt;code>0&lt;/code> 都改成 &lt;code>1&lt;/code> ，把子数组中的每一个 &lt;code>1&lt;/code> 都改成&lt;code>0&lt;/code> 。&lt;/p>
&lt;p>返回数组中不存在 &lt;code>0&lt;/code> 所需的最小 &lt;strong>k 位翻转&lt;/strong>次数。如果不可能，则返回  &lt;code>-1&lt;/code> 。&lt;/p></description></item><item><title>LeetCode 260. 只出现一次的数字 III</title><link>https://tategotoazarasi.github.io/post/single-number-iii/</link><pubDate>Mon, 19 Sep 2022 16:22:28 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/single-number-iii/</guid><description>&lt;p>给你一个整数数组  &lt;code>nums&lt;/code>，其中恰好有两个元素只出现一次，其余所有元素均出现两次。找出只出现一次的那两个元素。你可以按 &lt;strong>任意顺序&lt;/strong> 返回答案。&lt;/p></description></item><item><title>LeetCode 329. 矩阵中的最长递增路径</title><link>https://tategotoazarasi.github.io/post/longest-increasing-path-in-a-matrix/</link><pubDate>Mon, 19 Sep 2022 13:41:55 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/longest-increasing-path-in-a-matrix/</guid><description>&lt;p>给定一个  &lt;code>m x n&lt;/code> 整数矩阵  &lt;code>matrix&lt;/code> ，找出其中 &lt;strong>最长递增路径&lt;/strong> 的长度。&lt;/p>
&lt;p>对于每个单元格，你可以往上，下，左，右四个方向移动。 你 &lt;strong>不能&lt;/strong> 在 &lt;strong>对角线&lt;/strong> 方向上移动或移动到 &lt;strong>边界外&lt;/strong>（即不允许环绕）。&lt;/p></description></item><item><title>LeetCode 174. Dungeon Game</title><link>https://tategotoazarasi.github.io/post/dungeon-game/</link><pubDate>Tue, 13 Sep 2022 17:00:13 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/dungeon-game/</guid><description>&lt;p>The demons had captured the princess and imprisoned her in &lt;strong>the bottom-right corner&lt;/strong> of a &lt;code>dungeon&lt;/code>. The &lt;code>dungeon&lt;/code> consists of &lt;code>m x n&lt;/code> rooms laid out in a 2D grid. Our valiant knight was initially positioned in &lt;strong>the top-left room&lt;/strong> and must fight his way through &lt;code>dungeon&lt;/code> to rescue the princess.&lt;/p>
&lt;p>The knight has an initial health point represented by a positive integer. If at any point his health point drops to &lt;code>0&lt;/code> or below, he dies immediately.&lt;/p>
&lt;p>Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight&amp;rsquo;s health (represented by positive integers).&lt;/p>
&lt;p>To reach the princess as quickly as possible, the knight decides to move only &lt;strong>rightward&lt;/strong> or &lt;strong>downward&lt;/strong> in each step.&lt;/p>
&lt;p>Return &lt;em>the knight&amp;rsquo;s minimum initial health so that he can rescue the princess&lt;/em>.&lt;/p></description></item><item><title>LeetCode 416. 分割等和子集</title><link>https://tategotoazarasi.github.io/post/partition-equal-subset-sum/</link><pubDate>Tue, 13 Sep 2022 15:17:46 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/partition-equal-subset-sum/</guid><description>&lt;p>给你一个 &lt;strong>只包含正整数&lt;/strong> 的 &lt;strong>非空&lt;/strong> 数组  &lt;code>nums&lt;/code>。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。&lt;/p></description></item><item><title>LeetCode 486. 预测赢家</title><link>https://tategotoazarasi.github.io/post/predict-the-winner/</link><pubDate>Tue, 13 Sep 2022 13:43:09 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/predict-the-winner/</guid><description>&lt;p>给你一个整数数组 &lt;code>nums&lt;/code> 。玩家 1 和玩家 2 基于这个数组设计了一个游戏。&lt;/p>
&lt;p>玩家 1 和玩家 2 轮流进行自己的回合，玩家 1 先手。开始时，两个玩家的初始分值都是 &lt;code>0&lt;/code>。每一回合，玩家从数组的任意一端取一个数字（即，&lt;code>nums[0]&lt;/code> 或&lt;code>nums[nums.length - 1]&lt;/code>），取到的数字将会从数组中移除（数组长度减 &lt;code>1&lt;/code>）。玩家选中的数字将会加到他的得分上。当数组中没有剩余数字可取时，游戏结束。&lt;/p>
&lt;p>如果玩家 1 能成为赢家，返回 &lt;code>true&lt;/code> 。如果两个玩家得分相等，同样认为玩家 1 是游戏的赢家，也返回 &lt;code>true&lt;/code>。你可以假设每个玩家的玩法都会使他的分数最大化。&lt;/p></description></item><item><title>LeetCode 85. 最大矩形</title><link>https://tategotoazarasi.github.io/post/maximal-rectangle/</link><pubDate>Tue, 13 Sep 2022 12:53:39 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/maximal-rectangle/</guid><description>&lt;p>给定一个仅包含  &lt;code>0&lt;/code> 和 &lt;code>1&lt;/code> 、大小为 &lt;code>rows x cols&lt;/code> 的二维二进制矩阵，找出只包含 &lt;code>1&lt;/code> 的最大矩形，并返回其面积。&lt;/p></description></item><item><title>LeetCode 309. 最佳买卖股票时机含冷冻期</title><link>https://tategotoazarasi.github.io/post/best-time-to-buy-and-sell-stock-with-cooldown/</link><pubDate>Thu, 08 Sep 2022 14:15:02 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/best-time-to-buy-and-sell-stock-with-cooldown/</guid><description>&lt;p>给定一个整数数组&lt;code>prices&lt;/code>，其中第  &lt;code>prices[i]&lt;/code>  表示第  &lt;code>i&lt;/code>  天的股票价格。​&lt;/p>
&lt;p>设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:&lt;/p>
&lt;ul>
&lt;li>卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。&lt;/li>
&lt;/ul></description></item><item><title>LeetCode 315. 计算右侧小于当前元素的个数</title><link>https://tategotoazarasi.github.io/post/count-of-smaller-numbers-after-self/</link><pubDate>Wed, 07 Sep 2022 13:47:35 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/count-of-smaller-numbers-after-self/</guid><description>&lt;p>给你一个整数数组 &lt;code>nums&lt;/code> ，按要求返回一个新数组  &lt;code>counts&lt;/code> 。数组 &lt;code>counts&lt;/code> 有该性质： &lt;code>counts[i]&lt;/code> 的值是   &lt;code>nums[i]&lt;/code> 右侧小于  &lt;code>nums[i]&lt;/code> 的元素的数量。&lt;/p></description></item><item><title>LeetCode 4. 寻找两个正序数组的中位数</title><link>https://tategotoazarasi.github.io/post/median-of-two-sorted-arrays/</link><pubDate>Wed, 07 Sep 2022 13:12:36 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/median-of-two-sorted-arrays/</guid><description>&lt;p>给定两个大小分别为 &lt;code>m&lt;/code> 和 &lt;code>n&lt;/code> 的正序（从小到大）数组  &lt;code>nums1&lt;/code> 和  &lt;code>nums2&lt;/code>。请你找出并返回这两个正序数组的 &lt;strong>中位数&lt;/strong> 。&lt;/p>
&lt;p>算法的时间复杂度应该为 &lt;code>O(log (m+n))&lt;/code> 。&lt;/p></description></item><item><title>LeetCode 489. 扫地机器人</title><link>https://tategotoazarasi.github.io/post/robot-room-cleaner/</link><pubDate>Tue, 06 Sep 2022 14:03:06 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/robot-room-cleaner/</guid><description>&lt;p>房间（用格栅表示）中有一个扫地机器人。格栅中的每一个格子有空和障碍物两种可能。&lt;/p>
&lt;p>扫地机器人提供 4 个 API，可以向前进，向左转或者向右转。每次转弯 90 度。&lt;/p>
&lt;p>当扫地机器人试图进入障碍物格子时，它的碰撞传感器会探测出障碍物，使它停留在原地。&lt;/p>
&lt;p>请利用提供的 4 个 API 编写让机器人清理整个房间的算法。&lt;/p></description></item><item><title>LeetCode 301. 删除无效的括号</title><link>https://tategotoazarasi.github.io/post/remove-invalid-parentheses/</link><pubDate>Tue, 06 Sep 2022 13:11:21 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/remove-invalid-parentheses/</guid><description>&lt;p>给你一个由若干括号和字母组成的字符串 &lt;code>s&lt;/code>，删除最小数量的无效括号，使得输入的字符串有效。&lt;/p>
&lt;p>返回所有可能的结果。答案可以按 &lt;strong>任意顺序&lt;/strong> 返回。&lt;/p></description></item><item><title>LeetCode 1192. 查找集群内的「关键连接」</title><link>https://tategotoazarasi.github.io/post/critical-connections-in-a-network/</link><pubDate>Fri, 02 Sep 2022 15:40:57 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/critical-connections-in-a-network/</guid><description>&lt;p>力扣数据中心有  &lt;code>n&lt;/code>  台服务器，分别按从  &lt;code>0&lt;/code>  到  &lt;code>n-1&lt;/code>  的方式进行了编号。它们之间以「服务器到服务器」点对点的形式相互连接组成了一个内部集群，其中连接  &lt;code>connections&lt;/code> 是无向的。从形式上讲，&lt;code>connections[i] = [a, b]&lt;/code>  表示服务器 &lt;code>a&lt;/code>  和 &lt;code>b&lt;/code>  之间形成连接。任何服务器都可以直接或者间接地通过网络到达任何其他服务器。&lt;/p>
&lt;p>&lt;em>「关键连接」&lt;/em>  是在该集群中的重要连接，也就是说，假如我们将它移除，便会导致某些服务器无法访问其他服务器。&lt;/p>
&lt;p>请你以任意顺序返回该集群内的所有 「关键连接」。&lt;/p></description></item><item><title>LeetCode 76. 最小覆盖子串</title><link>https://tategotoazarasi.github.io/post/minimum-window-substring/</link><pubDate>Mon, 29 Aug 2022 17:02:13 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/minimum-window-substring/</guid><description>&lt;p>给你一个字符串 &lt;code>s&lt;/code> 、一个字符串 &lt;code>t&lt;/code> 。返回 &lt;code>s&lt;/code> 中涵盖 &lt;code>t&lt;/code> 所有字符的最小子串。如果 &lt;code>s&lt;/code> 中不存在涵盖 &lt;code>t&lt;/code> 所有字符的子串，则返回空字符串 &lt;code>&amp;quot;&amp;quot;&lt;/code> 。&lt;/p></description></item><item><title>LeetCode 1231. 分享巧克力</title><link>https://tategotoazarasi.github.io/post/divide-chocolate/</link><pubDate>Thu, 25 Aug 2022 16:59:33 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/divide-chocolate/</guid><description>&lt;p>你有一大块巧克力，它由一些甜度不完全相同的小块组成。我们用数组  &lt;code>sweetness&lt;/code>  来表示每一小块的甜度。&lt;/p>
&lt;p>你打算和  &lt;code>K&lt;/code>  名朋友一起分享这块巧克力，所以你需要将切割  &lt;code>K&lt;/code>  次才能得到&lt;code>K+1&lt;/code>  块，每一块都由一些 &lt;strong>连续&lt;/strong>的小块组成。&lt;/p>
&lt;p>为了表现出你的慷慨，你将会吃掉  &lt;strong>总甜度最小&lt;/strong>的一块，并将其余几块分给你的朋友们。&lt;/p>
&lt;p>请找出一个最佳的切割策略，使得你所分得的巧克力  &lt;strong>总甜度最大&lt;/strong>，并返回这个&lt;strong>最大总甜度&lt;/strong>。&lt;/p></description></item><item><title>LeetCode 560. Subarray Sum Equals K</title><link>https://tategotoazarasi.github.io/post/subarray-sum-equals-k/</link><pubDate>Mon, 27 Jun 2022 14:37:09 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/subarray-sum-equals-k/</guid><description>&lt;p>Given an array of integers &lt;code>nums&lt;/code> and an integer &lt;code>k&lt;/code>, return &lt;em>the total number of subarrays whose sum equals to&lt;/em> &lt;code>k&lt;/code>.&lt;/p>
&lt;p>A subarray is a contiguous &lt;strong>non-empty&lt;/strong> sequence of elements within an array.&lt;/p></description></item><item><title>LeetCode 435. Non-overlapping Intervals</title><link>https://tategotoazarasi.github.io/post/non-overlapping-intervals/</link><pubDate>Sun, 26 Jun 2022 13:49:43 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/non-overlapping-intervals/</guid><description>&lt;p>Given an array of intervals &lt;code>intervals&lt;/code> where \(intervals[i] = [start_i, end_i]\), return &lt;em>the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping&lt;/em>.&lt;/p></description></item><item><title>LeetCode 166. Fraction to Recurring Decimal</title><link>https://tategotoazarasi.github.io/post/fraction-to-recurring-decimal/</link><pubDate>Tue, 21 Jun 2022 15:53:27 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/fraction-to-recurring-decimal/</guid><description>&lt;p>Given two integers representing the &lt;code>numerator&lt;/code> and &lt;code>denominator&lt;/code> of a fraction, return &lt;em>the fraction in string format&lt;/em>.&lt;/p>
&lt;p>If the fractional part is repeating, enclose the repeating part in parentheses.&lt;/p>
&lt;p>If multiple answers are possible, return &lt;strong>any of them&lt;/strong>.&lt;/p>
&lt;p>It is &lt;strong>guaranteed&lt;/strong> that the length of the answer string is less than &lt;code>104&lt;/code> for all the given inputs.&lt;/p></description></item><item><title>LeetCode 29. Divide Two Integers</title><link>https://tategotoazarasi.github.io/post/divide-two-integers/</link><pubDate>Tue, 21 Jun 2022 15:53:24 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/divide-two-integers/</guid><description>&lt;p>Given two integers &lt;code>dividend&lt;/code> and &lt;code>divisor&lt;/code>, divide two integers &lt;strong>without&lt;/strong> using multiplication, division, and mod operator.&lt;/p>
&lt;p>The integer division should truncate toward zero, which means losing its fractional part. For example, &lt;code>8.345&lt;/code> would be truncated to &lt;code>8&lt;/code>, and &lt;code>-2.7335&lt;/code> would be truncated to &lt;code>-2&lt;/code>.&lt;/p>
&lt;p>Return &lt;em>the &lt;strong>quotient&lt;/strong> after dividing&lt;/em> &lt;code>dividend&lt;/code> &lt;em>by&lt;/em> &lt;code>divisor&lt;/code>.&lt;/p></description></item><item><title>LeetCode 50. Pow(x, n)</title><link>https://tategotoazarasi.github.io/post/powx-n/</link><pubDate>Tue, 21 Jun 2022 15:53:22 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/powx-n/</guid><description>&lt;p>Implement &lt;a href="http://www.cplusplus.com/reference/valarray/pow/">pow(x, n)&lt;/a>, which calculates &lt;code>x&lt;/code> raised to the power &lt;code>n&lt;/code> (i.e., \(x^n\)).&lt;/p></description></item><item><title>LeetCode 5. Longest Palindromic Substring</title><link>https://tategotoazarasi.github.io/post/longest-palindromic-substring/</link><pubDate>Wed, 08 Jun 2022 13:14:02 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/longest-palindromic-substring/</guid><description>&lt;p>Given a string &lt;code>s&lt;/code>, return &lt;em>the longest palindromic substring&lt;/em> in &lt;code>s&lt;/code>.&lt;/p></description></item><item><title>LeetCode 713. Subarray Product Less Than K</title><link>https://tategotoazarasi.github.io/post/subarray-product-less-than-k/</link><pubDate>Mon, 30 May 2022 13:24:11 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/subarray-product-less-than-k/</guid><description>&lt;p>Given an array of integers &lt;code>nums&lt;/code> and an integer &lt;code>k&lt;/code>, return &lt;em>the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than&lt;/em> &lt;code>k&lt;/code>.&lt;/p></description></item><item><title>LeetCode 11. Container With Most Water</title><link>https://tategotoazarasi.github.io/post/container-with-most-water/</link><pubDate>Sun, 29 May 2022 14:00:35 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/container-with-most-water/</guid><description>&lt;p>You are given an integer array &lt;code>height&lt;/code> of length &lt;code>n&lt;/code>. There are &lt;code>n&lt;/code>
vertical lines drawn such that the two endpoints of the &lt;code>ith&lt;/code> line are
&lt;code>(i, 0)&lt;/code> and &lt;code>(i, height[i])&lt;/code>.&lt;/p>
&lt;p>Find two lines that together with the x-axis form a container, such that
the container contains the most water.&lt;/p>
&lt;p>Return &lt;em>the maximum amount of water a container can store&lt;/em>.&lt;/p></description></item><item><title>LeetCode 162. Find Peak Element</title><link>https://tategotoazarasi.github.io/post/find-peak-element/</link><pubDate>Fri, 27 May 2022 12:47:10 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/find-peak-element/</guid><description>&lt;p>A peak element is an element that is strictly greater than its neighbors.&lt;/p>
&lt;p>Given an integer array &lt;code>nums&lt;/code>, find a peak element, and return its index. If the array contains multiple peaks, return the index to &lt;strong>any of the peaks&lt;/strong>.&lt;/p>
&lt;p>You may imagine that &lt;code>nums[-1] = nums[n] = -∞&lt;/code>.&lt;/p>
&lt;p>You must write an algorithm that runs in &lt;code>O(log n)&lt;/code> time.&lt;/p></description></item><item><title>LeetCode 1988. Find Cutoff Score for Each School</title><link>https://tategotoazarasi.github.io/post/find-cutoff-score-for-each-school/</link><pubDate>Tue, 17 May 2022 13:11:57 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/find-cutoff-score-for-each-school/</guid><description>&lt;p>Table: Schools&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>school_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>capacity&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>school_id is the primary key for this table.
This table contains information about the capacity of some schools. The capacity is the maximum number of students the school can accept.&lt;/p>
&lt;p>Table: Exam&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>score&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>student_count&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>score is the primary key for this table.
Each row in this table indicates that there are student_count students that got at least score points in the exam.
The data in this table will be logically correct, meaning a row recording a higher score will have the same or smaller student_count compared to a row recording a lower score. More formally, for every two rows i and j in the table, if scorei &amp;gt; scorej then student_counti &amp;lt;= student_countj.&lt;/p>
&lt;p>Every year, each school announces a minimum score requirement that a student needs to apply to it. The school chooses the minimum score requirement based on the exam results of all the students:&lt;/p>
&lt;pre>&lt;code>They want to ensure that even if every student meeting the requirement applies, the school can accept everyone.
They also want to maximize the possible number of students that can apply.
They must use a score that is in the Exam table.
&lt;/code>&lt;/pre>
&lt;p>Write an SQL query to report the minimum score requirement for each school. If there are multiple score values satisfying the above conditions, choose the smallest one. If the input data is not enough to determine the score, report -1.&lt;/p>
&lt;p>Return the result table in any order.&lt;/p></description></item><item><title>LeetCode 1501. Countries You Can Safely Invest In</title><link>https://tategotoazarasi.github.io/post/countries-you-can-safely-invest-in/</link><pubDate>Sat, 14 May 2022 14:19:51 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/countries-you-can-safely-invest-in/</guid><description>&lt;p>Table &lt;code>Person&lt;/code>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>phone_number&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id is the primary key for this table.
Each row of this table contains the name of a person and their phone number.
Phone number will be in the form &amp;lsquo;xxx-yyyyyyy&amp;rsquo; where xxx is the country code (3 characters) and yyyyyyy is the phone number (7 characters) where x and y are digits. Both can contain leading zeros.&lt;/p>
&lt;p>Table &lt;code>Country&lt;/code>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>country_code&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>country_code is the primary key for this table.
Each row of this table contains the country name and its code. country_code will be in the form &amp;lsquo;xxx&amp;rsquo; where x is digits.&lt;/p>
&lt;p>Table &lt;code>Calls&lt;/code>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>caller_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>callee_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>duration&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>There is no primary key for this table, it may contain duplicates.
Each row of this table contains the caller id, callee id and the duration of the call in minutes. caller_id != callee_id&lt;/p>
&lt;p>A telecommunications company wants to invest in new countries. The company intends to invest in the countries where the average call duration of the calls in this country is strictly greater than the global average call duration.&lt;/p>
&lt;p>Write an SQL query to find the countries where this company can invest.&lt;/p>
&lt;p>Return the result table in &lt;strong>any order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 1445. Apples &amp; Oranges</title><link>https://tategotoazarasi.github.io/post/apples-oranges/</link><pubDate>Thu, 14 Apr 2022 14:08:45 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/apples-oranges/</guid><description>&lt;p>Table: &lt;code>Sales&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>sale_date&lt;/td>
&lt;td>date&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fruit&lt;/td>
&lt;td>enum&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sold_num&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>(sale_date, fruit) is the primary key for this table.
This table contains the sales of &amp;ldquo;apples&amp;rdquo; and &amp;ldquo;oranges&amp;rdquo; sold each day.&lt;/p>
&lt;p>Write an SQL query to report the difference between the number of &lt;strong>apples&lt;/strong> and &lt;strong>oranges&lt;/strong> sold each day.&lt;/p>
&lt;p>Return the result table &lt;strong>ordered&lt;/strong> by &lt;code>sale_date&lt;/code>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 1699. Number of Calls Between Two Persons</title><link>https://tategotoazarasi.github.io/post/number-of-calls-between-two-persons/</link><pubDate>Thu, 14 Apr 2022 13:52:10 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/number-of-calls-between-two-persons/</guid><description>&lt;p>Table: &lt;code>Calls&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>from_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>to_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>duration&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>This table does not have a primary key, it may contain duplicates.
This table contains the duration of a phone call between from_id and to_id.
from_id != to_id&lt;/p>
&lt;p>Write an SQL query to report the number of calls and the total call duration between each pair of distinct persons &lt;code>(person1, person2)&lt;/code> where &lt;code>person1 &amp;lt; person2&lt;/code>.&lt;/p>
&lt;p>Return the result table in &lt;strong>any order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 1084. Sales Analysis III</title><link>https://tategotoazarasi.github.io/post/sales-analysis-iii/</link><pubDate>Wed, 13 Apr 2022 17:42:35 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/sales-analysis-iii/</guid><description>&lt;p>Table: &lt;code>Product&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>product_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>product_name&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>unit_price&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>product_id is the primary key of this table.
Each row of this table indicates the name and the price of each product.&lt;/p>
&lt;p>Table: &lt;code>Sales&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>seller_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>product_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>buyer_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sale_date&lt;/td>
&lt;td>date&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>quantity&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>price&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>This table has no primary key, it can have repeated rows.
product_id is a foreign key to the Product table.
Each row of this table contains some information about one sale.&lt;/p>
&lt;p>Write an SQL query that reports the &lt;strong>products&lt;/strong> that were &lt;strong>only&lt;/strong> sold in the spring of &lt;code>2019&lt;/code>. That is, between &lt;code>2019-01-01&lt;/code> and &lt;code>2019-03-31&lt;/code> inclusive.&lt;/p>
&lt;p>Return the result table in &lt;strong>any order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 380. Insert Delete GetRandom O(1)</title><link>https://tategotoazarasi.github.io/post/insert-delete-getrandom-o1/</link><pubDate>Wed, 13 Apr 2022 15:22:28 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/insert-delete-getrandom-o1/</guid><description>&lt;p>实现&lt;code>RandomizedSet&lt;/code> 类：&lt;/p>
&lt;ul>
&lt;li>&lt;code>RandomizedSet()&lt;/code> 初始化 &lt;code>RandomizedSet&lt;/code> 对象&lt;/li>
&lt;li>&lt;code>bool insert(int val)&lt;/code> 当元素 &lt;code>val&lt;/code> 不存在时，向集合中插入该项，并返回 &lt;code>true&lt;/code> ；否则，返回 &lt;code>false&lt;/code> 。&lt;/li>
&lt;li>&lt;code>bool remove(int val)&lt;/code> 当元素 &lt;code>val&lt;/code> 存在时，从集合中移除该项，并返回 &lt;code>true&lt;/code> ；否则，返回 &lt;code>false&lt;/code> 。&lt;/li>
&lt;li>&lt;code>int getRandom()&lt;/code> 随机返回现有集合中的一项（测试用例保证调用此方法时集合中至少存在一个元素）。每个元素应该有 &lt;strong>相同的概率&lt;/strong> 被返回。&lt;/li>
&lt;/ul>
&lt;p>你必须实现类的所有函数，并满足每个函数的 &lt;strong>平均&lt;/strong> 时间复杂度为 &lt;code>O(1)&lt;/code> 。&lt;/p></description></item><item><title>LeetCode 6040. Maximum Total Beauty of the Gardens</title><link>https://tategotoazarasi.github.io/post/maximum-total-beauty-of-the-gardens/</link><pubDate>Sun, 10 Apr 2022 12:20:00 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/maximum-total-beauty-of-the-gardens/</guid><description>&lt;p>Alice is a caretaker of &lt;code>n&lt;/code> gardens and she wants to plant flowers to maximize the total beauty of all her gardens.&lt;/p>
&lt;p>You are given a &lt;strong>0-indexed&lt;/strong> integer array &lt;code>flowers&lt;/code> of size &lt;code>n&lt;/code>, where &lt;code>flowers[i]&lt;/code> is the number of flowers already planted in the &lt;code>ith&lt;/code> garden. Flowers that are already planted &lt;strong>cannot&lt;/strong> be removed. You are then given another integer &lt;code>newFlowers&lt;/code>, which is the &lt;strong>maximum&lt;/strong> number of flowers that Alice can additionally plant. You are also given the integers &lt;code>target&lt;/code>, &lt;code>full&lt;/code>, and &lt;code>partial&lt;/code>.&lt;/p>
&lt;p>A garden is considered &lt;strong>complete&lt;/strong> if it has &lt;strong>at least&lt;/strong> &lt;code>target&lt;/code> flowers. The &lt;strong>total beauty&lt;/strong> of the gardens is then determined as the &lt;strong>sum&lt;/strong> of the following:&lt;/p>
&lt;ul>
&lt;li>The number of &lt;strong>complete&lt;/strong> gardens multiplied by &lt;code>full&lt;/code>.&lt;/li>
&lt;li>The &lt;strong>minimum&lt;/strong> number of flowers in any of the &lt;strong>incomplete&lt;/strong> gardens multiplied by &lt;code>partial&lt;/code>. If there are no incomplete gardens, then this value will be &lt;code>0&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>Return &lt;em>the &lt;strong>maximum&lt;/strong> total beauty that Alice can obtain after planting at most&lt;/em> &lt;code>newFlowers&lt;/code> &lt;em>flowers.&lt;/em>&lt;/p></description></item><item><title>LeetCode 780. Reaching Points</title><link>https://tategotoazarasi.github.io/post/reaching-points/</link><pubDate>Sat, 09 Apr 2022 14:26:35 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/reaching-points/</guid><description>&lt;p>Given four integers &lt;code>sx&lt;/code>, &lt;code>sy&lt;/code>, &lt;code>tx&lt;/code>, and &lt;code>ty&lt;/code>, return &lt;code>true&lt;/code> &lt;em>if it is possible to convert the point&lt;/em> &lt;code>(sx, sy)&lt;/code> &lt;em>to the point&lt;/em> &lt;code>(tx, ty)&lt;/code> &lt;em>through some operations**, or&lt;/em> &lt;code>false&lt;/code> &lt;em>otherwise&lt;/em>.&lt;/p>
&lt;p>The allowed operation on some point &lt;code>(x, y)&lt;/code> is to convert it to either &lt;code>(x, x + y)&lt;/code> or &lt;code>(x + y, y)&lt;/code>.&lt;/p></description></item><item><title>LeetCode 608. Tree Node</title><link>https://tategotoazarasi.github.io/post/tree-node/</link><pubDate>Thu, 07 Apr 2022 12:05:45 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/tree-node/</guid><description>&lt;p>Table: &lt;code>Tree&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>p_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id is the primary key column for this table.
Each row of this table contains information about the id of a node and the id of its parent node in a tree.
The given structure is always a valid tree.&lt;/p>
&lt;p>Each node in the tree can be one of three types:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ldquo;Leaf&amp;rdquo;&lt;/strong>: if the node is a leaf node.&lt;/li>
&lt;li>&lt;strong>&amp;ldquo;Root&amp;rdquo;&lt;/strong>: if the node is the root of the tree.&lt;/li>
&lt;li>&lt;strong>&amp;ldquo;Inner&amp;rdquo;&lt;/strong>: If the node is neither a leaf node nor a root node.&lt;/li>
&lt;/ul>
&lt;p>Write an SQL query to report the type of each node in the tree.&lt;/p>
&lt;p>Return the result table &lt;strong>ordered&lt;/strong> by &lt;code>id&lt;/code> &lt;strong>in ascending order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 1795. Rearrange Products Table</title><link>https://tategotoazarasi.github.io/post/rearrange-products-table/</link><pubDate>Thu, 07 Apr 2022 12:05:35 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/rearrange-products-table/</guid><description>&lt;p>Table: &lt;code>Products&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>product_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>store1&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>store2&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>store3&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>product_id is the primary key for this table.
Each row in this table indicates the product&amp;rsquo;s price in 3 different stores: store1, store2, and store3.
If the product is not available in a store, the price will be null in that store&amp;rsquo;s column.&lt;/p>
&lt;p>Write an SQL query to rearrange the &lt;code>Products&lt;/code> table so that each row has &lt;code>(product_id, store, price)&lt;/code>. If a product is not available in a store, do &lt;strong>not&lt;/strong> include a row with that &lt;code>product_id&lt;/code> and &lt;code>store&lt;/code> combination in the result table.&lt;/p>
&lt;p>Return the result table in &lt;strong>any order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 1965. Employees With Missing Information</title><link>https://tategotoazarasi.github.io/post/employees-with-missing-information/</link><pubDate>Thu, 07 Apr 2022 12:05:28 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/employees-with-missing-information/</guid><description>&lt;p>Table: &lt;code>Employees&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>employee_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>employee_id is the primary key for this table.
Each row of this table indicates the name of the employee whose ID is employee_id.&lt;/p>
&lt;p>Table: &lt;code>Salaries&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>employee_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>salary&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>employee_id is the primary key for this table.
Each row of this table indicates the salary of the employee whose ID is employee_id.&lt;/p>
&lt;p>Write an SQL query to report the IDs of all the employees with &lt;strong>missing information&lt;/strong>. The information of an employee is missing if:&lt;/p>
&lt;ul>
&lt;li>The employee&amp;rsquo;s &lt;strong>name&lt;/strong> is missing, or&lt;/li>
&lt;li>The employee&amp;rsquo;s &lt;strong>salary&lt;/strong> is missing.&lt;/li>
&lt;/ul>
&lt;p>Return the result table ordered by &lt;code>employee_id&lt;/code> &lt;strong>in ascending order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 310. Minimum Height Trees</title><link>https://tategotoazarasi.github.io/post/minimum-height-trees/</link><pubDate>Wed, 06 Apr 2022 15:03:31 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/minimum-height-trees/</guid><description>&lt;p>A tree is an undirected graph in which any two vertices are connected by &lt;em>exactly&lt;/em> one path. In other words, any connected graph without simple cycles is a tree.&lt;/p>
&lt;p>Given a tree of &lt;code>n&lt;/code> nodes labelled from &lt;code>0&lt;/code> to &lt;code>n - 1&lt;/code>, and an array of &lt;code>n - 1&lt;/code> &lt;code>edges&lt;/code> where &lt;code>edges[i] = [ai, bi]&lt;/code> indicates that there is an undirected edge between the two nodes &lt;code>ai&lt;/code> and &lt;code>bi&lt;/code> in the tree, you can choose any node of the tree as the root. When you select a node &lt;code>x&lt;/code> as the root, the result tree has height &lt;code>h&lt;/code>. Among all possible rooted trees, those with minimum height (i.e. &lt;code>min(h)&lt;/code>)  are called &lt;strong>minimum height trees&lt;/strong> (MHTs).&lt;/p>
&lt;p>Return &lt;em>a list of all &lt;strong>MHTs&amp;rsquo;&lt;/strong> root labels&lt;/em>. You can return the answer in &lt;strong>any order&lt;/strong>.&lt;/p>
&lt;p>The &lt;strong>height&lt;/strong> of a rooted tree is the number of edges on the longest downward path between the root and a leaf.&lt;/p></description></item><item><title>LeetCode 307. Range Sum Query - Mutable</title><link>https://tategotoazarasi.github.io/post/range-sum-query-mutable/</link><pubDate>Mon, 04 Apr 2022 12:46:58 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/range-sum-query-mutable/</guid><description>&lt;p>Given an integer array &lt;code>nums&lt;/code>, handle multiple queries of the following types:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Update&lt;/strong> the value of an element in &lt;code>nums&lt;/code>.&lt;/li>
&lt;li>Calculate the &lt;strong>sum&lt;/strong> of the elements of &lt;code>nums&lt;/code> between indices &lt;code>left&lt;/code> and &lt;code>right&lt;/code> &lt;strong>inclusive&lt;/strong> where &lt;code>left &amp;lt;= right&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>Implement the &lt;code>NumArray&lt;/code> class:&lt;/p>
&lt;ul>
&lt;li>&lt;code>NumArray(int[] nums)&lt;/code> Initializes the object with the integer array &lt;code>nums&lt;/code>.&lt;/li>
&lt;li>&lt;code>void update(int index, int val)&lt;/code> &lt;strong>Updates&lt;/strong> the value of &lt;code>nums[index]&lt;/code> to be &lt;code>val&lt;/code>.&lt;/li>
&lt;li>&lt;code>int sumRange(int left, int right)&lt;/code> Returns the &lt;strong>sum&lt;/strong> of the elements of &lt;code>nums&lt;/code> between indices &lt;code>left&lt;/code> and &lt;code>right&lt;/code> &lt;strong>inclusive&lt;/strong> (i.e. &lt;code>nums[left] + nums[left + 1] + ... + nums[right]&lt;/code>).&lt;/li>
&lt;/ul></description></item><item><title>LeetCode 6036. Sum of Scores of Built Strings</title><link>https://tategotoazarasi.github.io/post/sum-of-scores-of-built-strings/</link><pubDate>Sun, 03 Apr 2022 17:48:50 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/sum-of-scores-of-built-strings/</guid><description>&lt;p>You are &lt;strong>building&lt;/strong> a string &lt;code>s&lt;/code> of length &lt;code>n&lt;/code> &lt;strong>one&lt;/strong> character at a time, &lt;strong>prepending&lt;/strong> each new character to the &lt;strong>front&lt;/strong> of the string. The strings are labeled from &lt;code>1&lt;/code> to &lt;code>n&lt;/code>, where the string with length &lt;code>i&lt;/code> is labeled \(s_i\).&lt;/p>
&lt;ul>
&lt;li>For example, for \(s = &amp;ldquo;abaca&amp;rdquo;, s_1 == &amp;ldquo;a&amp;rdquo;, s_2 == &amp;ldquo;ca&amp;rdquo;, s_3 == &amp;ldquo;aca&amp;rdquo;\), etc.&lt;/li>
&lt;/ul>
&lt;p>The &lt;strong>score&lt;/strong> of \(s_i\) is the length of the &lt;strong>longest common prefix&lt;/strong> between \(s_i\) and \(s_n\) (Note that \(s == s_n\)).&lt;/p>
&lt;p>Given the final string &lt;code>s&lt;/code>, return &lt;em>the &lt;strong>sum&lt;/strong> of the &lt;strong>score&lt;/strong> of every&lt;/em> \(s_i\).&lt;/p></description></item><item><title>LeetCode 5302. Encrypt and Decrypt Strings</title><link>https://tategotoazarasi.github.io/post/encrypt-and-decrypt-strings/</link><pubDate>Sun, 03 Apr 2022 17:10:49 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/encrypt-and-decrypt-strings/</guid><description>&lt;p>You are given a character array &lt;code>keys&lt;/code> containing &lt;strong>unique&lt;/strong> characters and a string array &lt;code>values&lt;/code> containing strings of length 2. You are also given another string array &lt;code>dictionary&lt;/code> that contains all permitted original strings after decryption. You
should implement a data structure that can encrypt or decrypt a &lt;strong>0-indexed&lt;/strong> string.&lt;/p>
&lt;p>A string is &lt;strong>encrypted&lt;/strong> with the following process:&lt;/p>
&lt;ol>
&lt;li>For each character &lt;code>c&lt;/code> in the string, we find the index &lt;code>i&lt;/code> satisfying &lt;code>keys[i] == c&lt;/code> in &lt;code>keys&lt;/code>.&lt;/li>
&lt;li>Replace &lt;code>c&lt;/code> with &lt;code>values[i]&lt;/code> in the string.&lt;/li>
&lt;/ol>
&lt;p>A string is &lt;strong>decrypted&lt;/strong> with the following process:&lt;/p>
&lt;ol>
&lt;li>For each substring &lt;code>s&lt;/code> of length 2 occurring at an even index in the string, we find an &lt;code>i&lt;/code> such that &lt;code>values[i] == s&lt;/code>. If there are multiple valid &lt;code>i&lt;/code>, we choose &lt;strong>any&lt;/strong> one of them. This means a string could have multiple possible strings it can decrypt to.&lt;/li>
&lt;li>Replace &lt;code>s&lt;/code> with &lt;code>keys[i]&lt;/code> in the string.&lt;/li>
&lt;/ol>
&lt;p>Implement the &lt;code>Encrypter&lt;/code> class:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Encrypter(char[] keys, String[] values, String[] dictionary)&lt;/code> Initializes the &lt;code>Encrypter&lt;/code> class with &lt;code>keys, values&lt;/code>, and &lt;code>dictionary&lt;/code>.&lt;/li>
&lt;li>&lt;code>String encrypt(String word1)&lt;/code> Encrypts &lt;code>word1&lt;/code> with the encryption process described above and returns the encrypted string.&lt;/li>
&lt;li>&lt;code>int decrypt(String word2)&lt;/code> Returns the number of possible strings &lt;code>word2&lt;/code> could decrypt to that also appear in &lt;code>dictionary&lt;/code>.&lt;/li>
&lt;/ul></description></item><item><title>LeetCode 420. Strong Password Checker</title><link>https://tategotoazarasi.github.io/post/strong-password-checker/</link><pubDate>Sat, 02 Apr 2022 13:21:16 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/strong-password-checker/</guid><description>&lt;p>A password is considered strong if the below conditions are all met:&lt;/p>
&lt;ul>
&lt;li>It has at least &lt;code>6&lt;/code> characters and at most &lt;code>20&lt;/code> characters.&lt;/li>
&lt;li>It contains at least &lt;strong>one lowercase&lt;/strong> letter, at least &lt;strong>one uppercase&lt;/strong> letter, and at least &lt;strong>one digit&lt;/strong>.&lt;/li>
&lt;li>It does not contain three repeating characters in a row (i.e., &lt;code>&amp;quot;...aaa...&amp;quot;&lt;/code> is weak, but &lt;code>&amp;quot;...aa...a...&amp;quot;&lt;/code> is strong, assuming other conditions are met).&lt;/li>
&lt;/ul>
&lt;p>Given a string &lt;code>password&lt;/code>, return &lt;em>the minimum number of steps required to make &lt;code>password&lt;/code> strong. if &lt;code>password&lt;/code> is already strong, return &lt;code>0&lt;/code>.&lt;/em>&lt;/p>
&lt;p>In one step, you can:&lt;/p>
&lt;ul>
&lt;li>Insert one character to &lt;code>password&lt;/code>,&lt;/li>
&lt;li>Delete one character from &lt;code>password&lt;/code>, or&lt;/li>
&lt;li>Replace one character of &lt;code>password&lt;/code> with another character.&lt;/li>
&lt;/ul></description></item><item><title>LeetCode 440. K-th Smallest in Lexicographical Order</title><link>https://tategotoazarasi.github.io/post/k-th-smallest-in-lexicographical-order/</link><pubDate>Wed, 23 Mar 2022 15:27:10 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/k-th-smallest-in-lexicographical-order/</guid><description>&lt;p>Given two integers &lt;code>n&lt;/code> and &lt;code>k&lt;/code>, return &lt;em>the&lt;/em> &lt;code>kth&lt;/code> &lt;em>lexicographically smallest integer in the range&lt;/em> &lt;code>[1, n]&lt;/code>.&lt;/p></description></item><item><title>LeetCode 6023. Minimum White Tiles After Covering With Carpets</title><link>https://tategotoazarasi.github.io/post/minimum-white-tiles-after-covering-with-carpets/</link><pubDate>Sun, 20 Mar 2022 17:49:37 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/minimum-white-tiles-after-covering-with-carpets/</guid><description>&lt;p>You are given a &lt;strong>0-indexed binary&lt;/strong> string &lt;code>floor&lt;/code>, which represents the colors of tiles on a floor:&lt;/p>
&lt;ul>
&lt;li>&lt;code>floor[i] = '0'&lt;/code> denotes that the &lt;code>ith&lt;/code> tile of the floor is colored &lt;strong>black&lt;/strong>.&lt;/li>
&lt;li>On the other hand, &lt;code>floor[i] = '1'&lt;/code> denotes that the &lt;code>ith&lt;/code> tile of the floor is colored &lt;strong>white&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;p>You are also given &lt;code>numCarpets&lt;/code> and &lt;code>carpetLen&lt;/code>. You have &lt;code>numCarpets&lt;/code> &lt;strong>black&lt;/strong> carpets, each of length &lt;code>carpetLen&lt;/code> tiles. Cover the tiles with the given carpets such that the number of &lt;strong>white&lt;/strong> tiles still visible is &lt;strong>minimum&lt;/strong>. Carpets may overlap one another.&lt;/p>
&lt;p>Return &lt;em>the &lt;strong>minimum&lt;/strong> number of white tiles still visible.&lt;/em>&lt;/p></description></item><item><title>LeetCode 6032. Minimum Weighted Subgraph With the Required Paths</title><link>https://tategotoazarasi.github.io/post/minimum-weighted-subgraph-with-the-required-paths/</link><pubDate>Sun, 13 Mar 2022 20:28:53 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/minimum-weighted-subgraph-with-the-required-paths/</guid><description>&lt;p>You are given an integer &lt;code>n&lt;/code> denoting the number of nodes of a &lt;strong>weighted directed&lt;/strong> graph. The nodes are numbered from &lt;code>0&lt;/code> to &lt;code>n - 1&lt;/code>.&lt;/p>
&lt;p>You are also given a 2D integer array &lt;code>edges&lt;/code> where \(edges[i] = [from_i, to_i, weight_i]\) denotes that there exists a &lt;strong>directed&lt;/strong> edge from \(from_i\) to \(to_i\) with weight \(weight_i\).&lt;/p>
&lt;p>Lastly, you are given three &lt;strong>distinct&lt;/strong> integers &lt;code>src1&lt;/code>, &lt;code>src2&lt;/code>, and &lt;code>dest&lt;/code> denoting three distinct nodes of the graph.&lt;/p>
&lt;p>Return &lt;em>the &lt;strong>minimum weight&lt;/strong> of a subgraph of the graph such that it is &lt;strong>possible&lt;/strong> to reach&lt;/em> &lt;code>dest&lt;/code> &lt;em>from both&lt;/em> &lt;code>src1&lt;/code> &lt;em>and&lt;/em> &lt;code>src2&lt;/code> &lt;em>via a set of edges of this subgraph&lt;/em>. In case such a subgraph does not exist, return &lt;code>-1&lt;/code>.&lt;/p>
&lt;p>A &lt;strong>subgraph&lt;/strong> is a graph whose vertices and edges are subsets of the original graph. The &lt;strong>weight&lt;/strong> of a subgraph is the sum of weights of its constituent edges.&lt;/p></description></item><item><title>LeetCode 798. Smallest Rotation with Highest Score</title><link>https://tategotoazarasi.github.io/post/smallest-rotation-with-highest-score/</link><pubDate>Wed, 09 Mar 2022 14:47:26 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/smallest-rotation-with-highest-score/</guid><description>&lt;p>You are given an array &lt;code>nums&lt;/code>. You can rotate it by a non-negative integer &lt;code>k&lt;/code> so that the array becomes &lt;code>[nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]&lt;/code>. Afterward, any entries that are less than or equal to their index are worth one point.&lt;/p>
&lt;ul>
&lt;li>For example, if we have &lt;code>nums = [2,4,1,3,0]&lt;/code>, and we rotate by &lt;code>k = 2&lt;/code>, it becomes &lt;code>[1,3,0,2,4]&lt;/code>. This is worth &lt;code>3&lt;/code> points because &lt;code>1 &amp;gt; 0&lt;/code> [no points], &lt;code>3 &amp;gt; 1&lt;/code> [no points], &lt;code>0 &amp;lt;= 2&lt;/code> [one point], &lt;code>2 &amp;lt;= 3&lt;/code> [one point], &lt;code>4 &amp;lt;= 4&lt;/code> [one point].&lt;/li>
&lt;/ul>
&lt;p>Return &lt;em>the rotation index&lt;/em> &lt;code>k&lt;/code> &lt;em>that corresponds to the highest score we can achieve if we rotated&lt;/em> &lt;code>nums&lt;/code> &lt;em>by it&lt;/em>. If there are multiple answers, return the smallest such index &lt;code>k&lt;/code>.&lt;/p></description></item><item><title>LeetCode 2104. Sum of Subarray Ranges</title><link>https://tategotoazarasi.github.io/post/sum-of-subarray-ranges/</link><pubDate>Fri, 04 Mar 2022 13:09:50 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/sum-of-subarray-ranges/</guid><description>&lt;p>You are given an integer array &lt;code>nums&lt;/code>. The &lt;strong>range&lt;/strong> of a subarray of &lt;code>nums&lt;/code> is the difference between the largest and smallest element in the subarray.&lt;/p>
&lt;p>Return &lt;em>the &lt;strong>sum of all&lt;/strong> subarray ranges of&lt;/em> &lt;code>nums&lt;/code>&lt;em>.&lt;/em>&lt;/p>
&lt;p>A subarray is a contiguous &lt;strong>non-empty&lt;/strong> sequence of elements within an array.&lt;/p></description></item><item><title>LeetCode 258. Add Digits</title><link>https://tategotoazarasi.github.io/post/add-digits/</link><pubDate>Thu, 03 Mar 2022 13:13:27 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/add-digits/</guid><description>&lt;p>Given an integer &lt;code>num&lt;/code>, repeatedly add all its digits until the result has only one digit, and return it.&lt;/p></description></item><item><title>LeetCode 571. Find Median Given Frequency of Numbers</title><link>https://tategotoazarasi.github.io/post/find-median-given-frequency-of-numbers/</link><pubDate>Wed, 02 Mar 2022 11:09:05 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/find-median-given-frequency-of-numbers/</guid><description>&lt;p>Table: &lt;code>Numbers&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>num&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>frequency&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>num is the primary key for this table.
Each row of this table shows the frequency of a number in the database.&lt;/p>
&lt;p>The &lt;a href="https://en.wikipedia.org/wiki/Median">&lt;strong>median&lt;/strong>&lt;/a> is the value separating the higher half from the lower half of a data sample.&lt;/p>
&lt;p>Write an SQL query to report the &lt;strong>median&lt;/strong> of all the numbers in the database after decompressing the &lt;code>Numbers&lt;/code> table. Round the median to &lt;strong>one decimal point&lt;/strong>.&lt;/p></description></item><item><title>LeetCode 6011. 完成比赛的最少时间</title><link>https://tategotoazarasi.github.io/post/minimum-time-to-finish-the-race/</link><pubDate>Sun, 27 Feb 2022 16:35:07 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/minimum-time-to-finish-the-race/</guid><description>&lt;p>给你一个下标从 &lt;strong>0&lt;/strong>  开始的二维整数数组  &lt;code>tires&lt;/code> ，其中  \(tires[i] = [f_i, r_i]\)  表示第  &lt;code>i&lt;/code>  种轮胎如果连续使用，第  &lt;code>x&lt;/code>  圈需要耗时  \(f_i * r_i^{(x-1)}\)  秒。&lt;/p>
&lt;ul>
&lt;li>比方说，如果  \(f_i = 3\)  且  \(r_i = 2\) ，且一直使用这种类型的同一条轮胎，那么该轮胎完成第  &lt;code>1&lt;/code>  圈赛道耗时 &lt;code>3&lt;/code>  秒，完成第 &lt;code>2&lt;/code>  圈耗时  &lt;code>3 * 2 = 6&lt;/code>  秒，完成第 &lt;code>3&lt;/code>  圈耗时  \(3 * 2^2 = 12\)  秒，依次类推。&lt;/li>
&lt;/ul>
&lt;p>同时给你一个整数  &lt;code>changeTime&lt;/code>  和一个整数  &lt;code>numLaps&lt;/code> 。&lt;/p>
&lt;p>比赛总共包含  &lt;code>numLaps&lt;/code>  圈，你可以选择 &lt;strong>任意&lt;/strong>  一种轮胎开始比赛。每一种轮胎都有 &lt;strong>无数条&lt;/strong> 。每一圈后，你可以选择耗费 &lt;code>changeTime&lt;/code>  秒 &lt;strong>换成&lt;/strong>  任意一种轮胎（也可以换成当前种类的新轮胎）。&lt;/p>
&lt;p>请你返回完成比赛需要耗费的 &lt;strong>最少&lt;/strong>  时间。&lt;/p></description></item><item><title>LeetCode 534. Game Play Analysis III</title><link>https://tategotoazarasi.github.io/post/game-play-analysis-iii/</link><pubDate>Sat, 26 Feb 2022 09:38:26 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/game-play-analysis-iii/</guid><description>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>player_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>device_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>event_date&lt;/td>
&lt;td>date&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>games_played&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>(player_id, event_date) is the primary key of this table.
This table shows the activity of players of some games.
Each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device.&lt;/p>
&lt;p>Write an SQL query to report for each player and date, how many games played &lt;strong>so far&lt;/strong> by the player. That is, the total number of games played by the player until that date. Check the example for clarity.&lt;/p>
&lt;p>Return the result table in &lt;strong>any order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 1994. 好子集的数目</title><link>https://tategotoazarasi.github.io/post/the-number-of-good-subsets/</link><pubDate>Tue, 22 Feb 2022 09:23:56 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/the-number-of-good-subsets/</guid><description>&lt;p>给你一个整数数组  &lt;code>nums&lt;/code> 。如果  &lt;code>nums&lt;/code>  的一个子集中，所有元素的乘积可以表示为一个或多个 &lt;strong>互不相同的质数&lt;/strong> 的乘积，那么我们称它为  &lt;strong>好子集&lt;/strong> 。&lt;/p>
&lt;ul>
&lt;li>比方说，如果  &lt;code>nums = [1, 2, 3, 4]&lt;/code> ：
&lt;ul>
&lt;li>&lt;code>[2, 3]&lt;/code> ，&lt;code>[1, 2, 3]&lt;/code>  和  &lt;code>[1, 3]&lt;/code>  是 &lt;strong>好&lt;/strong>  子集，乘积分别为  &lt;code>6 = 2*3&lt;/code> ，&lt;code>6 = 2*3&lt;/code>  和  &lt;code>3 = 3&lt;/code> 。&lt;/li>
&lt;li>&lt;code>[1, 4]&lt;/code> 和  &lt;code>[4]&lt;/code>  不是 &lt;strong>好&lt;/strong>  子集，因为乘积分别为  &lt;code>4 = 2*2&lt;/code> 和  &lt;code>4 = 2*2&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>请你返回 &lt;code>nums&lt;/code>  中不同的  &lt;strong>好&lt;/strong>  子集的数目对 &lt;code>109 + 7&lt;/code> &lt;strong>取余&lt;/strong>  的结果。&lt;/p>
&lt;p>&lt;code>nums&lt;/code>  中的 &lt;strong>子集&lt;/strong>  是通过删除 &lt;code>nums&lt;/code>  中一些（可能一个都不删除，也可能全部都删除）元素后剩余元素组成的数组。如果两个子集删除的下标不同，那么它们被视为不同的子集。&lt;/p></description></item><item><title>LeetCode 6015. 统计可以被 K 整除的下标对数目</title><link>https://tategotoazarasi.github.io/post/count-array-pairs-divisible-by-k/</link><pubDate>Sun, 20 Feb 2022 12:30:41 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/count-array-pairs-divisible-by-k/</guid><description>&lt;p>给你一个下标从 &lt;strong>0&lt;/strong> 开始、长度为 &lt;code>n&lt;/code> 的整数数组 &lt;code>nums&lt;/code> 和一个整数 &lt;code>k&lt;/code> ，返回满足下述条件的下标对 &lt;code>(i, j)&lt;/code> 的数目：&lt;/p>
&lt;ul>
&lt;li>&lt;code>0 &amp;lt;= i &amp;lt; j &amp;lt;= n - 1&lt;/code> 且&lt;/li>
&lt;li>&lt;code>nums[i] * nums[j]&lt;/code> 能被 &lt;code>k&lt;/code> 整除。&lt;/li>
&lt;/ul></description></item><item><title>LeetCode 5999. 统计数组中好三元组数目</title><link>https://tategotoazarasi.github.io/post/count-good-triplets-in-an-array/</link><pubDate>Sun, 20 Feb 2022 09:30:44 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/count-good-triplets-in-an-array/</guid><description>&lt;p>给你两个下标从 &lt;strong>0&lt;/strong>  开始且长度为 &lt;code>n&lt;/code>  的整数数组  &lt;code>nums1&lt;/code>  和  &lt;code>nums2&lt;/code> ，两者都是  &lt;code>[0, 1, ..., n - 1]&lt;/code>  的  &lt;strong>排列&lt;/strong> 。&lt;/p>
&lt;p>&lt;strong>好三元组&lt;/strong> 指的是  &lt;code>3&lt;/code>  个  &lt;strong>互不相同&lt;/strong>  的值，且它们在数组  &lt;code>nums1&lt;/code> 和  &lt;code>nums2&lt;/code>  中出现顺序保持一致。换句话说，如果我们将  \(pos1_v\) 记为值  &lt;code>v&lt;/code>  在  &lt;code>nums1&lt;/code>  中出现的位置，\(pos2_v\  为值  &lt;code>v&lt;/code>  在  &lt;code>nums2&lt;/code>  中的位置，那么一个好三元组定义为  &lt;code>0 &amp;lt;= x, y, z &amp;lt;= n - 1&lt;/code> ，且  \(pos1_x &amp;lt; pos1_y &amp;lt; pos1_z\) 和  \(pos2_x &amp;lt; pos2_y &amp;lt; pos2_z\)  都成立的  &lt;code>(x, y, z)&lt;/code> 。&lt;/p>
&lt;p>请你返回好三元组的 &lt;strong>总数目&lt;/strong> 。&lt;/p></description></item><item><title>LeetCode 1179. Reformat Department Table</title><link>https://tategotoazarasi.github.io/post/reformat-department-table/</link><pubDate>Sat, 19 Feb 2022 14:31:05 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/reformat-department-table/</guid><description>&lt;p>Table: &lt;code>Department&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>revenue&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>month&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>(id, month) is the primary key of this table.
The table has information about the revenue of each department per month.
The month has values in [&amp;ldquo;Jan&amp;rdquo;,&amp;ldquo;Feb&amp;rdquo;,&amp;ldquo;Mar&amp;rdquo;,&amp;ldquo;Apr&amp;rdquo;,&amp;ldquo;May&amp;rdquo;,&amp;ldquo;Jun&amp;rdquo;,&amp;ldquo;Jul&amp;rdquo;,&amp;ldquo;Aug&amp;rdquo;,&amp;ldquo;Sep&amp;rdquo;,&amp;ldquo;Oct&amp;rdquo;,&amp;ldquo;Nov&amp;rdquo;,&amp;ldquo;Dec&amp;rdquo;].&lt;/p>
&lt;p>Write an SQL query to reformat the table such that there is a department id column and a revenue column &lt;strong>for each month&lt;/strong>.&lt;/p>
&lt;p>Return the result table in &lt;strong>any order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 627. Swap Salary</title><link>https://tategotoazarasi.github.io/post/swap-salary/</link><pubDate>Fri, 18 Feb 2022 10:09:38 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/swap-salary/</guid><description>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sex&lt;/td>
&lt;td>ENUM&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>salary&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id is the primary key for this table.
The sex column is ENUM value of type (&amp;rsquo;m&amp;rsquo;, &amp;lsquo;f&amp;rsquo;).
The table contains information about an employee.&lt;/p>
&lt;p>Write an SQL query to swap all &lt;code>'f'&lt;/code> and &lt;code>'m'&lt;/code> values (i.e., change all &lt;code>'f'&lt;/code> values to &lt;code>'m'&lt;/code> and vice versa) with a &lt;strong>single update statement&lt;/strong> and no intermediate temporary tables.&lt;/p>
&lt;p>Note that you must write a single update statement, &lt;strong>do not&lt;/strong> write any select statement for this problem.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 626. Exchange Seats</title><link>https://tategotoazarasi.github.io/post/exchange-seats/</link><pubDate>Wed, 16 Feb 2022 16:13:02 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/exchange-seats/</guid><description>&lt;p>Table: &lt;code>Seat&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id is the primary key column for this table.
Each row of this table indicates the name and the ID of a student.
id is a continuous increment.&lt;/p>
&lt;p>Write an SQL query to swap the seat id of every two consecutive
students. If the number of students is odd, the id of the last student
is not swapped.&lt;/p>
&lt;p>Return the result table ordered by &lt;code>id&lt;/code> &lt;strong>in ascending order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 1719. Number Of Ways To Reconstruct A Tree</title><link>https://tategotoazarasi.github.io/post/number-of-ways-to-reconstruct-a-tree/</link><pubDate>Wed, 16 Feb 2022 12:23:57 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/number-of-ways-to-reconstruct-a-tree/</guid><description>&lt;p>You are given an array &lt;code>pairs&lt;/code>, where \(pairs[i] = [x_i, y_i]\), and:&lt;/p>
&lt;ul>
&lt;li>There are no duplicates.&lt;/li>
&lt;li>\(x_i &amp;lt; y_i\)&lt;/li>
&lt;/ul>
&lt;p>Let &lt;code>ways&lt;/code> be the number of rooted trees that satisfy the following conditions:&lt;/p>
&lt;ul>
&lt;li>The tree consists of nodes whose values appeared in &lt;code>pairs&lt;/code>.&lt;/li>
&lt;li>A pair \([x_i, y_i]\) exists in &lt;code>pairs&lt;/code> &lt;strong>if and only if&lt;/strong> \(x_i\) is an ancestor of \(y_i\) or \(y_i\) is an ancestor of \(x_i\).&lt;/li>
&lt;li>&lt;strong>Note:&lt;/strong> the tree does not have to be a binary tree.&lt;/li>
&lt;/ul>
&lt;p>Two ways are considered to be different if there is at least one node that has different parents in both ways.&lt;/p>
&lt;p>Return:&lt;/p>
&lt;ul>
&lt;li>&lt;code>0&lt;/code> if &lt;code>ways == 0&lt;/code>&lt;/li>
&lt;li>&lt;code>1&lt;/code> if &lt;code>ways == 1&lt;/code>&lt;/li>
&lt;li>&lt;code>2&lt;/code> if &lt;code>ways &amp;gt; 1&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>A &lt;strong>rooted tree&lt;/strong> is a tree that has a single root node, and all edges are oriented to be outgoing from the root.&lt;/p>
&lt;p>An &lt;strong>ancestor&lt;/strong> of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.&lt;/p></description></item><item><title>LeetCode 6007. 数组的最大与和</title><link>https://tategotoazarasi.github.io/post/maximum-and-sum-of-array/</link><pubDate>Sun, 13 Feb 2022 15:34:49 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/maximum-and-sum-of-array/</guid><description>&lt;p>给你一个长度为  &lt;code>n&lt;/code>  的整数数组  &lt;code>nums&lt;/code>  和一个整数  &lt;code>numSlots&lt;/code> ，满足&lt;code>2 * numSlots &amp;gt;= n&lt;/code> 。总共有  &lt;code>numSlots&lt;/code>  个篮子，编号为  &lt;code>1&lt;/code>  到  &lt;code>numSlots&lt;/code> 。&lt;/p>
&lt;p>你需要把所有  &lt;code>n&lt;/code>  个整数分到这些篮子中，且每个篮子 &lt;strong>至多&lt;/strong>  有 2 个整数。一种分配方案的 &lt;strong>与和&lt;/strong>  定义为每个数与它所在篮子编号的 &lt;strong>按位与运算&lt;/strong>  结果之和。&lt;/p>
&lt;ul>
&lt;li>比方说，将数字  &lt;code>[1, 3]&lt;/code>  放入篮子  &lt;strong>&lt;em>&lt;code>1&lt;/code>&lt;/em>&lt;/strong>  中，&lt;code>[4, 6]&lt;/code> 放入篮子  &lt;strong>&lt;em>&lt;code>2&lt;/code>&lt;/em>&lt;/strong>  中，这个方案的与和为  &lt;code>(1 AND 1) + (3 AND 1) + (4 AND 2) + (6 AND 2) = 1 + 1 + 0 + 2 = 4&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;p>请你返回将 &lt;code>nums&lt;/code>  中所有数放入 &lt;code>numSlots&lt;/code>  个篮子中的最大与和。&lt;/p></description></item><item><title>LeetCode 262. Trips and Users</title><link>https://tategotoazarasi.github.io/post/trips-and-users/</link><pubDate>Fri, 11 Feb 2022 11:04:37 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/trips-and-users/</guid><description>&lt;p>Table: &lt;code>Trips&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>client_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>driver_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>city_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>status&lt;/td>
&lt;td>enum&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>request_at&lt;/td>
&lt;td>date&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id is the primary key for this table.
The table holds all taxi trips. Each trip has a unique id, while client_id and driver_id are foreign keys to the users_id at the Users table.
Status is an ENUM type of (&amp;lsquo;completed&amp;rsquo;, &amp;lsquo;cancelled_by_driver&amp;rsquo;, &amp;lsquo;cancelled_by_client&amp;rsquo;).&lt;/p>
&lt;p>Table: &lt;code>Users&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>users_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>banned&lt;/td>
&lt;td>enum&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>role&lt;/td>
&lt;td>enum&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>users_id is the primary key for this table.
The table holds all users. Each user has a unique users_id, and role is an ENUM type of (&amp;lsquo;client&amp;rsquo;, &amp;lsquo;driver&amp;rsquo;, &amp;lsquo;partner&amp;rsquo;).
banned is an ENUM type of (&amp;lsquo;Yes&amp;rsquo;, &amp;lsquo;No&amp;rsquo;).&lt;/p>
&lt;p>The &lt;strong>cancellation rate&lt;/strong> is computed by dividing the
number of canceled (by client or driver) requests with unbanned users by
the total number of requests with unbanned users on that day.&lt;/p>
&lt;p>Write a SQL query to find the &lt;strong>cancellation rate&lt;/strong> of requests with unbanned users (&lt;strong>both client and driver must not be banned&lt;/strong>) each day between &lt;code>&amp;quot;2013-10-01&amp;quot;&lt;/code> and &lt;code>&amp;quot;2013-10-03&amp;quot;&lt;/code>. Round &lt;code>Cancellation Rate&lt;/code> to &lt;strong>two decimal&lt;/strong> points.&lt;/p>
&lt;p>Return the result table in &lt;strong>any order&lt;/strong>.&lt;/p></description></item><item><title>LeetCode 197. Rising Temperature</title><link>https://tategotoazarasi.github.io/post/rising-temperature/</link><pubDate>Thu, 10 Feb 2022 11:05:17 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/rising-temperature/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">Create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">If&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Weather&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">recordDate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">date&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">temperature&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Truncate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Weather&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Weather&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">recordDate&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">temperature&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;2015-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;10&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Weather&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">recordDate&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">temperature&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;2015-01-02&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;25&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Weather&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">recordDate&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">temperature&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;2015-01-03&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;20&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Weather&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">recordDate&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">temperature&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;4&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;2015-01-04&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;30&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Table: &lt;code>Weather&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>recordDate&lt;/td>
&lt;td>date&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>temperature&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id is the primary key for this table.
This table contains information about the temperature on a certain day.&lt;/p>
&lt;p>Write an SQL query to find all dates&amp;rsquo; &lt;code>Id&lt;/code> with higher temperatures compared to its previous dates (yesterday).&lt;/p>
&lt;p>Return the result table in &lt;strong>any order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 196. Delete Duplicate Emails</title><link>https://tategotoazarasi.github.io/post/delete-duplicate-emails/</link><pubDate>Wed, 09 Feb 2022 15:54:42 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/delete-duplicate-emails/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">Create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">If&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Email&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Truncate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;john@example.com&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;bob@example.com&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;john@example.com&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Table: &lt;code>Person&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>email&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id is the primary key column for this table.
Each row of this table contains an email. The emails will not contain uppercase letters.&lt;/p>
&lt;p>Write an SQL query to &lt;strong>delete&lt;/strong> all the duplicate emails, keeping only one unique email with the smallest &lt;code>id&lt;/code>. Note that you are supposed to write a &lt;code>DELETE&lt;/code> statement and not a &lt;code>SELECT&lt;/code> one.&lt;/p>
&lt;p>Return the result table in &lt;strong>any order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 185. Department Top Three Salaries</title><link>https://tategotoazarasi.github.io/post/department-top-three-salaries/</link><pubDate>Tue, 08 Feb 2022 18:41:34 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/department-top-three-salaries/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">Create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">If&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">If&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Department&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Truncate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Joe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;85000&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Henry&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;80000&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Sam&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;60000&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;4&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Max&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;90000&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;5&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Janet&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;69000&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;6&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Randy&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;85000&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;7&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Will&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;70000&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Truncate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Department&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Department&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;IT&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Department&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Sales&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Table: &lt;code>Employee&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>salary&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>departmentId&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id is the primary key column for this table.
departmentId is a foreign key of the ID from the &lt;code>Department&lt;/code> table.
Each row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.&lt;/p>
&lt;p>Table: &lt;code>Department&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id is the primary key column for this table.
Each row of this table indicates the ID of a department and its name.&lt;/p>
&lt;p>A company&amp;rsquo;s executives are interested in seeing who earns the most money in each of the company&amp;rsquo;s departments. A &lt;strong>high earner&lt;/strong> in a department is an employee who has a salary in the &lt;strong>top three unique&lt;/strong> salaries for that department.&lt;/p>
&lt;p>Write an SQL query to find the employees who are &lt;strong>high earners&lt;/strong> in each of the departments.&lt;/p>
&lt;p>Return the result table &lt;strong>in any order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 184. Department Highest Salary</title><link>https://tategotoazarasi.github.io/post/department-highest-salary/</link><pubDate>Mon, 07 Feb 2022 10:55:28 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/department-highest-salary/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">Create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">If&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">If&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Department&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Truncate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Joe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;70000&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Jim&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;90000&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Henry&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;80000&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;4&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Sam&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;60000&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;5&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Max&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;90000&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Truncate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Department&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Department&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;IT&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Department&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Sales&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Table: &lt;code>Employee&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>salary&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>departmentId&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id is the primary key column for this table.
departmentId is a foreign key of the ID from the &lt;code>Department&lt;/code> table.
Each row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.&lt;/p>
&lt;p>Table: &lt;code>Department&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id is the primary key column for this table.
Each row of this table indicates the ID of a department and its name.&lt;/p>
&lt;p>Write an SQL query to find employees who have the highest salary in each of the departments.&lt;/p>
&lt;p>Return the result table in &lt;strong>any order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 6002. 设计位集</title><link>https://tategotoazarasi.github.io/post/design_bitset/</link><pubDate>Sun, 06 Feb 2022 12:45:27 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/design_bitset/</guid><description>&lt;p>&lt;strong>位集 Bitset&lt;/strong> 是一种能以紧凑形式存储位的数据结构。&lt;/p>
&lt;p>请你实现 &lt;code>Bitset&lt;/code> 类。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Bitset(int size)&lt;/code> 用 &lt;code>size&lt;/code> 个位初始化 Bitset ，所有位都是 &lt;code>0&lt;/code> 。&lt;/li>
&lt;li>&lt;code>void fix(int idx)&lt;/code> 将下标为 &lt;code>idx&lt;/code> 的位上的值更新为 &lt;code>1&lt;/code> 。如果值已经是 &lt;code>1&lt;/code> ，则不会发生任何改变。&lt;/li>
&lt;li>&lt;code>void unfix(int idx)&lt;/code> 将下标为 &lt;code>idx&lt;/code> 的位上的值更新为 &lt;code>0&lt;/code> 。如果值已经是 &lt;code>0&lt;/code> ，则不会发生任何改变。&lt;/li>
&lt;li>&lt;code>void flip()&lt;/code> 翻转 Bitset 中每一位上的值。换句话说，所有值为 &lt;code>0&lt;/code> 的位将会变成 &lt;code>1&lt;/code> ，反之亦然。&lt;/li>
&lt;li>&lt;code>boolean all()&lt;/code> 检查  Bitset 中 &lt;strong>每一位&lt;/strong> 的值是否都是 &lt;code>1&lt;/code> 。如果满足此条件，返回 &lt;code>true&lt;/code> ；否则，返回 &lt;code>false&lt;/code> 。&lt;/li>
&lt;li>&lt;code>boolean one()&lt;/code> 检查  Bitset 中 是否  &lt;strong>至少一位&lt;/strong> 的值是 &lt;code>1&lt;/code> 。如果满足此条件，返回 &lt;code>true&lt;/code> ；否则，返回 &lt;code>false&lt;/code> 。&lt;/li>
&lt;li>&lt;code>int count()&lt;/code> 返回 Bitset 中值为 1 的位的 &lt;strong>总数&lt;/strong> 。&lt;/li>
&lt;li>&lt;code>String toString()&lt;/code> 返回 Bitset 的当前组成情况。注意，在结果字符串中，第 &lt;code>i&lt;/code> 个下标处的字符应该与 Bitset 中的第 &lt;code>i&lt;/code> 位一致。&lt;/li>
&lt;/ul></description></item><item><title>LeetCode 182. Duplicate Emails</title><link>https://tategotoazarasi.github.io/post/duplicate-emails/</link><pubDate>Sat, 05 Feb 2022 10:57:27 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/duplicate-emails/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">Create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">If&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Truncate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;a@b.com&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;c@d.com&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;a@b.com&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Table: &lt;code>Person&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>email&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id is the primary key column for this table.
Each row of this table contains an email. The emails will not contain uppercase letters.&lt;/p>
&lt;p>Write an SQL query to report all the duplicate emails.&lt;/p>
&lt;p>Return the result table in &lt;strong>any order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 180. 连续出现的数字</title><link>https://tategotoazarasi.github.io/post/consecutive-numbers/</link><pubDate>Thu, 03 Feb 2022 21:06:00 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/consecutive-numbers/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">Create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">If&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Logs&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Truncate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Logs&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Logs&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Logs&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Logs&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Logs&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;4&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Logs&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;5&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Logs&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;6&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Logs&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;7&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>表：&lt;code>Logs&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>num&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id 是这个表的主键。&lt;/p>
&lt;p>编写一个 SQL 查询，查找所有至少连续出现三次的数字。&lt;/p>
&lt;p>返回的结果表中的数据可以按 &lt;strong>任意顺序&lt;/strong> 排列。&lt;/p></description></item><item><title>LeetCode 1414. 和为 K 的最少斐波那契数字数目</title><link>https://tategotoazarasi.github.io/post/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k/</link><pubDate>Thu, 03 Feb 2022 20:03:54 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k/</guid><description>&lt;p>给你数字 &lt;code>k&lt;/code> ，请你返回和为  &lt;code>k&lt;/code>  的斐波那契数字的最少数目，其中，每个斐波那契数字都可以被使用多次。&lt;/p>
&lt;p>斐波那契数字定义为：&lt;/p>
&lt;ul>
&lt;li>\(F_1 = 1\)&lt;/li>
&lt;li>\(F_2 = 1\)&lt;/li>
&lt;li>\(F_n = F_{n-1} + F_{n-2}\)， 其中 n &amp;gt; 2 。&lt;/li>
&lt;/ul>
&lt;p>数据保证对于给定的 &lt;code>k&lt;/code> ，一定能找到可行解。&lt;/p></description></item><item><title>LeetCode 1763. 最长的美好子字符串</title><link>https://tategotoazarasi.github.io/post/longest-nice-substring/</link><pubDate>Tue, 01 Feb 2022 19:52:49 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/longest-nice-substring/</guid><description>&lt;p>当一个字符串 &lt;code>s&lt;/code>  包含的每一种字母的大写和小写形式 &lt;strong>同时&lt;/strong>  出现在 &lt;code>s&lt;/code>  中，就称这个字符串  &lt;code>s&lt;/code>  是 &lt;strong>美好&lt;/strong> 字符串。比方说，&lt;code>&amp;quot;abABB&amp;quot;&lt;/code>  是美好字符串，因为  &lt;code>'A'&lt;/code> 和  &lt;code>'a'&lt;/code>  同时出现了，且  &lt;code>'B'&lt;/code> 和  &lt;code>'b'&lt;/code>  也同时出现了。然而，&lt;code>&amp;quot;abA&amp;quot;&lt;/code>  不是美好字符串因为  &lt;code>'b'&lt;/code>  出现了，而  &lt;code>'B'&lt;/code>  没有出现。&lt;/p>
&lt;p>给你一个字符串  &lt;code>s&lt;/code> ，请你返回  &lt;code>s&lt;/code>  最长的  &lt;strong>美好子字符串&lt;/strong> 。如果有多个答案，请你返回  &lt;strong>最早&lt;/strong>  出现的一个。如果不存在美好子字符串，请你返回一个空字符串。&lt;/p></description></item><item><title>LeetCode 5995. 字符串分组</title><link>https://tategotoazarasi.github.io/post/groups-of-strings/</link><pubDate>Sun, 30 Jan 2022 16:22:21 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/groups-of-strings/</guid><description>&lt;p>给你一个下标从  &lt;strong>0&lt;/strong> 开始的字符串数组  &lt;code>words&lt;/code> 。每个字符串都只包含 &lt;strong>小写英文字母&lt;/strong> 。&lt;code>words&lt;/code>  中任意一个子串中，每个字母都至多只出现一次。&lt;/p>
&lt;p>如果通过以下操作之一，我们可以从 &lt;code>s1&lt;/code>  的字母集合得到 &lt;code>s2&lt;/code>  的字母集合，那么我们称这两个字符串为 &lt;strong>关联的&lt;/strong> ：&lt;/p>
&lt;ul>
&lt;li>往  &lt;code>s1&lt;/code>  的字母集合中添加一个字母。&lt;/li>
&lt;li>从  &lt;code>s1&lt;/code>  的字母集合中删去一个字母。&lt;/li>
&lt;li>将 &lt;code>s1&lt;/code>  中的一个字母替换成另外任意一个字母（也可以替换为这个字母本身）。&lt;/li>
&lt;/ul>
&lt;p>数组  &lt;code>words&lt;/code>  可以分为一个或者多个无交集的 &lt;strong>组&lt;/strong> 。一个字符串与一个组如果满足以下 &lt;strong>任一&lt;/strong>  条件，它就属于这个组：&lt;/p>
&lt;ul>
&lt;li>它与组内 &lt;strong>至少&lt;/strong>  一个其他字符串关联。&lt;/li>
&lt;li>它是这个组中 &lt;strong>唯一&lt;/strong>  的字符串。&lt;/li>
&lt;/ul>
&lt;p>注意，你需要确保分好组后，一个组内的任一字符串与其他组的字符串都不关联。可以证明在这个条件下，分组方案是唯一的。&lt;/p>
&lt;p>请你返回一个长度为 &lt;code>2&lt;/code>  的数组  &lt;code>ans&lt;/code> ：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ans[0]&lt;/code>  是  &lt;code>words&lt;/code>  分组后的  &lt;strong>总组数&lt;/strong> 。&lt;/li>
&lt;li>&lt;code>ans[1]&lt;/code>  是字符串数目最多的组所包含的字符串数目。&lt;/li>
&lt;/ul></description></item><item><title>LeetCode 176. 第二高的薪水</title><link>https://tategotoazarasi.github.io/post/second-highest-salary/</link><pubDate>Sat, 29 Jan 2022 10:28:00 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/second-highest-salary/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">Create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">If&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Truncate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;100&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;200&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;300&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Employee&lt;/code> 表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>salary&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id 是这个表的主键。
表的每一行包含员工的工资信息。&lt;/p>
&lt;p>编写一个 SQL 查询，获取并返回 &lt;code>Employee&lt;/code>  表中第二高的薪水 。如果不存在第二高的薪水，查询应该返回 &lt;code>null&lt;/code> 。&lt;/p>
&lt;p>查询结果如下例所示。&lt;/p></description></item><item><title>LeetCode 1996. 游戏中弱角色的数量</title><link>https://tategotoazarasi.github.io/post/the-number-of-weak-characters-in-the-game/</link><pubDate>Fri, 28 Jan 2022 10:27:51 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/the-number-of-weak-characters-in-the-game/</guid><description>&lt;p>你正在参加一个多角色游戏，每个角色都有两个主要属性：&lt;strong>攻击&lt;/strong> 和 &lt;strong>防御&lt;/strong> 。给你一个二维整数数组 &lt;code>properties&lt;/code> ，其中 \(properties[i] = [attack_i, defense_i]\) 表示游戏中第 &lt;code>i&lt;/code> 个角色的属性。&lt;/p>
&lt;p>如果存在一个其他角色的攻击和防御等级 &lt;strong>都严格高于&lt;/strong> 该角色的攻击和防御等级，则认为该角色为 &lt;strong>弱角色&lt;/strong> 。更正式地，如果认为角色 &lt;code>i&lt;/code> &lt;strong>弱于&lt;/strong> 存在的另一个角色 &lt;code>j&lt;/code> ，那么 \(attack_j &amp;gt; attack_i\) 且 \(defense_j &amp;gt; defense_i\) 。&lt;/p>
&lt;p>返回 &lt;strong>弱角色&lt;/strong> 的数量。&lt;/p></description></item><item><title>LeetCode 5983. 同时运行 N 台电脑的最长时间</title><link>https://tategotoazarasi.github.io/post/maximum-running-time-of-n-computers/</link><pubDate>Sun, 16 Jan 2022 12:20:00 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/maximum-running-time-of-n-computers/</guid><description>&lt;p>你有  &lt;code>n&lt;/code>  台电脑。给你整数  &lt;code>n&lt;/code>  和一个下标从 &lt;strong>0&lt;/strong>  开始的整数数组  &lt;code>batteries&lt;/code> ，其中第  &lt;code>i&lt;/code>  个电池可以让一台电脑 &lt;strong>运行&lt;/strong> &lt;code>batteries[i]&lt;/code>  分钟。你想使用这些电池让  &lt;strong>全部&lt;/strong> &lt;code>n&lt;/code>  台电脑 &lt;strong>同时&lt;/strong>  运行。&lt;/p>
&lt;p>一开始，你可以给每台电脑连接 &lt;strong>至多一个电池&lt;/strong> 。然后在任意整数时刻，你都可以将一台电脑与它的电池断开连接，并连接另一个电池，你可以进行这个操作 &lt;strong>任意次&lt;/strong> 。新连接的电池可以是一个全新的电池，也可以是别的电脑用过的电池。断开连接和连接新的电池不会花费任何时间。&lt;/p>
&lt;p>注意，你不能给电池充电。&lt;/p>
&lt;p>请你返回你可以让 &lt;code>n&lt;/code>  台电脑同时运行的 &lt;strong>最长&lt;/strong>  分钟数。&lt;/p></description></item><item><title>LeetCode 5982. 解决智力问题</title><link>https://tategotoazarasi.github.io/post/solving-questions-with-brainpower/</link><pubDate>Sun, 16 Jan 2022 12:19:00 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/solving-questions-with-brainpower/</guid><description>&lt;p>给你一个下标从 &lt;strong>0&lt;/strong>  开始的二维整数数组  &lt;code>questions&lt;/code> ，其中 \(questions[i] = [points_i, brainpower_i]\)。&lt;/p>
&lt;p>这个数组表示一场考试里的一系列题目，你需要 &lt;strong>按顺序&lt;/strong> （也就是从问题 &lt;code>0&lt;/code> 开始依次解决），针对每个问题选择 &lt;strong>解决&lt;/strong>  或者 &lt;strong>跳过&lt;/strong>  操作。解决问题 &lt;code>i&lt;/code>  将让你 &lt;strong>获得&lt;/strong> \(points_i\) 的分数，但是你将 &lt;strong>无法&lt;/strong>  解决接下来的 \(brainpower_i\) 个问题（即只能跳过接下来的 \(brainpower_i\) 个问题）。如果你跳过问题  &lt;code>i&lt;/code> ，你可以对下一个问题决定使用哪种操作。&lt;/p>
&lt;ul>
&lt;li>比方说，给你  &lt;code>questions = [[3, 2], [4, 3], [4, 4], [2, 5]]&lt;/code> ：
&lt;ul>
&lt;li>如果问题  &lt;code>0&lt;/code>  被解决了， 那么你可以获得  &lt;code>3&lt;/code>  分，但你不能解决问题  &lt;code>1&lt;/code> 和  &lt;code>2&lt;/code> 。&lt;/li>
&lt;li>如果你跳过问题  &lt;code>0&lt;/code> ，且解决问题  &lt;code>1&lt;/code> ，你将获得 &lt;code>4&lt;/code> 分但是不能解决问题  &lt;code>2&lt;/code> 和  &lt;code>3&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>请你返回这场考试里你能获得的 &lt;strong>最高&lt;/strong>  分数。&lt;/p></description></item><item><title>LeetCode 382. 链表随机节点</title><link>https://tategotoazarasi.github.io/post/linked-list-random-node/</link><pubDate>Sun, 16 Jan 2022 10:00:10 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/linked-list-random-node/</guid><description>&lt;p>给你一个单链表，随机选择链表的一个节点，并返回相应的节点值。每个节点 &lt;strong>被选中的概率一样&lt;/strong> 。&lt;/p></description></item><item><title>LeetCode 1036. 逃离大迷宫</title><link>https://tategotoazarasi.github.io/post/escape-a-large-maze/</link><pubDate>Tue, 11 Jan 2022 16:08:56 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/escape-a-large-maze/</guid><description>&lt;p>在一个 \(10^6 \times 10^6\) 的网格中，每个网格上方格的坐标为 &lt;code>(x, y)&lt;/code> 。&lt;/p>
&lt;p>现在从源方格 \(source = [s_x, s_y]\) 开始出发，意图赶往目标方格 \(target = [t_x, t_y]\) 。数组 &lt;code>blocked&lt;/code> 是封锁的方格列表，其中每个 \(blocked[i] = [x_i, y_i]\) 表示坐标为 \((x_i, y_i)\) 的方格是禁止通行的。&lt;/p>
&lt;p>每次移动，都可以走到网格中在四个方向上相邻的方格，只要该方格 &lt;strong>不&lt;/strong> 在给出的封锁列表 &lt;code>blocked&lt;/code> 上。同时，不允许走出网格。&lt;/p>
&lt;p>只有在可以通过一系列的移动从源方格 &lt;code>source&lt;/code> 到达目标方格 &lt;code>target&lt;/code> 时才返回 &lt;code>true&lt;/code>。否则，返回 &lt;code>false&lt;/code>。&lt;/p></description></item><item><title>LeetCode 5978. 统计追加字母可以获得的单词数</title><link>https://tategotoazarasi.github.io/post/count-words-obtained-after-adding-a-letter/</link><pubDate>Sun, 09 Jan 2022 18:43:16 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/count-words-obtained-after-adding-a-letter/</guid><description>&lt;p>给你两个下标从 &lt;strong>0&lt;/strong> 开始的字符串数组 &lt;code>startWords&lt;/code> 和 &lt;code>targetWords&lt;/code> 。每个字符串都仅由 &lt;strong>小写英文字母&lt;/strong> 组成。&lt;/p>
&lt;p>对于 &lt;code>targetWords&lt;/code> 中的每个字符串，检查是否能够从 &lt;code>startWords&lt;/code> 中选出一个字符串，执行一次 &lt;strong>转换操作&lt;/strong> ，得到的结果与当前  &lt;code>targetWords&lt;/code> 字符串相等。&lt;/p>
&lt;p>&lt;strong>转换操作&lt;/strong> 如下面两步所述：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>追加&lt;/strong> 任何 &lt;strong>不存在&lt;/strong> 于当前字符串的任一小写字母到当前字符串的末尾。
&lt;ul>
&lt;li>例如，如果字符串为 &lt;code>&amp;quot;abc&amp;quot;&lt;/code> ，那么字母 &lt;code>'d'&lt;/code>、&lt;code>'e'&lt;/code> 或 &lt;code>'y'&lt;/code> 都可以加到该字符串末尾，但 &lt;code>'a'&lt;/code> 就不行。如果追加的是 &lt;code>'d'&lt;/code> ，那么结果字符串为 &lt;code>&amp;quot;abcd&amp;quot;&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>重排&lt;/strong> 新字符串中的字母，可以按 &lt;strong>任意&lt;/strong> 顺序重新排布字母。
&lt;ul>
&lt;li>例如，&lt;code>&amp;quot;abcd&amp;quot;&lt;/code> 可以重排为 &lt;code>&amp;quot;acbd&amp;quot;&lt;/code>、&lt;code>&amp;quot;bacd&amp;quot;&lt;/code>、&lt;code>&amp;quot;cbda&amp;quot;&lt;/code>，以此类推。注意，它也可以重排为 &lt;code>&amp;quot;abcd&amp;quot;&lt;/code> 自身。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>找出 &lt;code>targetWords&lt;/code> 中有多少字符串能够由  &lt;code>startWords&lt;/code> 中的 &lt;strong>任一&lt;/strong> 字符串执行上述转换操作获得。返回 &lt;code>targetWords&lt;/code> 中这类 &lt;strong>字符串的数目&lt;/strong> 。&lt;/p></description></item><item><title>LeetCode 89. 格雷编码</title><link>https://tategotoazarasi.github.io/post/gray-code/</link><pubDate>Sat, 08 Jan 2022 16:57:11 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/gray-code/</guid><description>&lt;p>&lt;strong>n 位格雷码序列&lt;/strong> 是一个由 &lt;code>2n&lt;/code> 个整数组成的序列，其中：&lt;/p>
&lt;ul>
&lt;li>每个整数都在范围 &lt;code>[0, 2n - 1]&lt;/code> 内（含 &lt;code>0&lt;/code> 和 &lt;code>2n - 1&lt;/code>）&lt;/li>
&lt;li>第一个整数是 &lt;code>0&lt;/code>&lt;/li>
&lt;li>一个整数在序列中出现 &lt;strong>不超过一次&lt;/strong>&lt;/li>
&lt;li>每对 &lt;strong>相邻&lt;/strong> 整数的二进制表示 &lt;strong>恰好一位不同&lt;/strong> ，且&lt;/li>
&lt;li>&lt;strong>第一个&lt;/strong> 和 &lt;strong>最后一个&lt;/strong> 整数的二进制表示 &lt;strong>恰好一位不同&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>给你一个整数 &lt;code>n&lt;/code> ，返回任一有效的 &lt;strong>n 位格雷码序列&lt;/strong> 。&lt;/p></description></item><item><title>LeetCode 913. 猫和老鼠</title><link>https://tategotoazarasi.github.io/post/cat-and-mouse/</link><pubDate>Tue, 04 Jan 2022 22:08:53 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/cat-and-mouse/</guid><description>&lt;p>两位玩家分别扮演猫和老鼠，在一张 &lt;strong>无向&lt;/strong> 图上进行游戏，两人轮流行动。&lt;/p>
&lt;p>图的形式是：&lt;code>graph[a]&lt;/code> 是一个列表，由满足 &lt;code>ab&lt;/code> 是图中的一条边的所有节点 &lt;code>b&lt;/code> 组成。&lt;/p>
&lt;p>老鼠从节点 &lt;code>1&lt;/code> 开始，第一个出发；猫从节点 &lt;code>2&lt;/code> 开始，第二个出发。在节点 &lt;code>0&lt;/code> 处有一个洞。&lt;/p>
&lt;p>在每个玩家的行动中，他们 &lt;strong>必须&lt;/strong> 沿着图中与所在当前位置连通的一条边移动。例如，如果老鼠在节点 &lt;code>1&lt;/code> ，那么它必须移动到 &lt;code>graph[1]&lt;/code> 中的任一节点。&lt;/p>
&lt;p>此外，猫无法移动到洞中（节点 &lt;code>0&lt;/code>）。&lt;/p>
&lt;p>然后，游戏在出现以下三种情形之一时结束：&lt;/p>
&lt;ul>
&lt;li>如果猫和老鼠出现在同一个节点，猫获胜。&lt;/li>
&lt;li>如果老鼠到达洞中，老鼠获胜。&lt;/li>
&lt;li>如果某一位置重复出现（即，玩家的位置和移动顺序都与上一次行动相同），游戏平局。&lt;/li>
&lt;/ul>
&lt;p>给你一张图 &lt;code>graph&lt;/code> ，并假设两位玩家都都以最佳状态参与游戏：&lt;/p>
&lt;ul>
&lt;li>如果老鼠获胜，则返回 &lt;code>1&lt;/code>；&lt;/li>
&lt;li>如果猫获胜，则返回 &lt;code>2&lt;/code>；&lt;/li>
&lt;li>如果平局，则返回 &lt;code>0&lt;/code> 。&lt;/li>
&lt;/ul></description></item><item><title>LeetCode 5970. 参加会议的最多员工数</title><link>https://tategotoazarasi.github.io/post/maximum-employees-to-be-invited-to-a-meeting/</link><pubDate>Sun, 02 Jan 2022 17:24:01 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/maximum-employees-to-be-invited-to-a-meeting/</guid><description>&lt;p>一个公司准备组织一场会议，邀请名单上有  &lt;code>n&lt;/code>  位员工。公司准备了一张 &lt;strong>圆形&lt;/strong>  的桌子，可以坐下 &lt;strong>任意数目&lt;/strong>  的员工。&lt;/p>
&lt;p>员工编号为 &lt;code>0&lt;/code>  到 &lt;code>n - 1&lt;/code> 。每位员工都有一位 &lt;strong>喜欢&lt;/strong>  的员工，每位员工  &lt;strong>当且仅当&lt;/strong>  他被安排在喜欢员工的旁边，他才会参加会议。每位员工喜欢的员工 &lt;strong>不会&lt;/strong>  是他自己。&lt;/p>
&lt;p>给你一个下标从 &lt;strong>0&lt;/strong>  开始的整数数组  &lt;code>favorite&lt;/code> ，其中  &lt;code>favorite[i]&lt;/code>  表示第  &lt;code>i&lt;/code>  位员工喜欢的员工。请你返回参加会议的  &lt;strong>最多员工数目&lt;/strong> 。&lt;/p></description></item><item><title>LeetCode 390. 消除游戏</title><link>https://tategotoazarasi.github.io/post/elimination-game/</link><pubDate>Sun, 02 Jan 2022 17:04:49 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/elimination-game/</guid><description>&lt;p>给定一个从 1 到 n 排序的整数列表。&lt;br>
首先，从左到右，从第一个数字开始，每隔一个数字进行删除，直到列表的末尾。&lt;br>
第二步，在剩下的数字中，从右到左，从倒数第一个数字开始，每隔一个数字进行删除，直到列表开头。&lt;br>
我们不断重复这两步，从左到右和从右到左交替进行，直到只剩下一个数字。&lt;br>
返回长度为 n 的列表中，最后剩下的数字。&lt;/p></description></item><item><title>LeetCode 538. 把二叉搜索树转换为累加树</title><link>https://tategotoazarasi.github.io/post/convert-bst-to-greater-tree/</link><pubDate>Fri, 31 Dec 2021 11:55:26 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/convert-bst-to-greater-tree/</guid><description>&lt;p>给出二叉 &lt;strong>搜索&lt;/strong> 树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点 &lt;code>node&lt;/code>  的新值等于原树中大于或等于  &lt;code>node.val&lt;/code>  的值之和。&lt;/p></description></item><item><title>LeetCode 472. 连接词</title><link>https://tategotoazarasi.github.io/post/concatenated-words/</link><pubDate>Tue, 28 Dec 2021 15:56:48 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/concatenated-words/</guid><description>&lt;p>给你一个 &lt;strong>不含重复&lt;/strong> 单词的字符串数组 &lt;code>words&lt;/code> ，请你找出并返回 &lt;code>words&lt;/code> 中的所有 &lt;strong>连接词&lt;/strong> 。&lt;/p>
&lt;p>&lt;strong>连接词&lt;/strong> 定义为：一个完全由给定数组中的至少两个较短单词组成的字符串。&lt;/p></description></item><item><title>LeetCode 5965. 相同元素的间隔之和</title><link>https://tategotoazarasi.github.io/post/intervals-between-identical-elements/</link><pubDate>Sun, 26 Dec 2021 15:11:10 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/intervals-between-identical-elements/</guid><description>&lt;p>给你一个下标从 &lt;strong>0&lt;/strong> 开始、由 &lt;code>n&lt;/code> 个整数组成的数组 &lt;code>arr&lt;/code> 。&lt;/p>
&lt;p>&lt;code>arr&lt;/code> 中两个元素的 &lt;strong>间隔&lt;/strong> 定义为它们下标之间的 &lt;strong>绝对差&lt;/strong> 。更正式地，&lt;code>arr[i]&lt;/code> 和 &lt;code>arr[j]&lt;/code> 之间的间隔是 &lt;code>|i - j|&lt;/code> 。&lt;/p>
&lt;p>返回一个长度为 &lt;code>n&lt;/code> 的数组  &lt;code>intervals&lt;/code> ，其中 &lt;code>intervals[i]&lt;/code> 是 &lt;code>arr[i]&lt;/code> 和 &lt;code>arr&lt;/code> 中每个相同元素（与 &lt;code>arr[i]&lt;/code> 的值相同）的 &lt;strong>间隔之和&lt;/strong> &lt;em>。&lt;/em>&lt;/p></description></item><item><title>LeetCode 5948. 判断一个括号字符串是否有效</title><link>https://tategotoazarasi.github.io/post/check-if-a-parentheses-string-can-be-valid/</link><pubDate>Sun, 26 Dec 2021 09:22:53 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/check-if-a-parentheses-string-can-be-valid/</guid><description>&lt;p>一个括号字符串是只由  &lt;code>'('&lt;/code> 和  &lt;code>')'&lt;/code>  组成的  &lt;strong>非空&lt;/strong>  字符串。如果一个字符串满足下面 &lt;strong>任意&lt;/strong>  一个条件，那么它就是有效的：&lt;/p>
&lt;ul>
&lt;li>字符串为  &lt;code>()&lt;/code>.&lt;/li>
&lt;li>它可以表示为 &lt;code>AB&lt;/code>（&lt;code>A&lt;/code>  与  &lt;code>B&lt;/code>  连接），其中&lt;code>A&lt;/code> 和  &lt;code>B&lt;/code>  都是有效括号字符串。&lt;/li>
&lt;li>它可以表示为  &lt;code>(A)&lt;/code> ，其中  &lt;code>A&lt;/code>  是一个有效括号字符串。&lt;/li>
&lt;/ul>
&lt;p>给你一个括号字符串  &lt;code>s&lt;/code>  和一个字符串  &lt;code>locked&lt;/code> ，两者长度都为  &lt;code>n&lt;/code> 。&lt;code>locked&lt;/code>  是一个二进制字符串，只包含  &lt;code>'0'&lt;/code>  和  &lt;code>'1'&lt;/code> 。对于  &lt;code>locked&lt;/code>  中  &lt;strong>每一个&lt;/strong>  下标  &lt;code>i&lt;/code> ：&lt;/p>
&lt;ul>
&lt;li>如果  &lt;code>locked[i]&lt;/code>  是  &lt;code>'1'&lt;/code> ，你 &lt;strong>不能&lt;/strong>  改变  &lt;code>s[i]&lt;/code> 。&lt;/li>
&lt;li>如果  &lt;code>locked[i]&lt;/code>  是  &lt;code>'0'&lt;/code> ，你  &lt;strong>可以&lt;/strong>  将  &lt;code>s[i]&lt;/code>  变为  &lt;code>'('&lt;/code>  或者  &lt;code>')'&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;p>如果你可以将 &lt;code>s&lt;/code>  变为有效括号字符串，请你返回  &lt;code>true&lt;/code> ，否则返回  &lt;code>false&lt;/code> 。&lt;/p></description></item><item><title>LeetCode 168. Excel表列名称</title><link>https://tategotoazarasi.github.io/post/excel-sheet-column-title/</link><pubDate>Sat, 25 Dec 2021 10:33:54 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/excel-sheet-column-title/</guid><description>&lt;p>给你一个整数 &lt;code>columnNumber&lt;/code> ，返回它在 Excel 表中相对应的列名称。&lt;/p></description></item><item><title>LeetCode 160. 相交链表</title><link>https://tategotoazarasi.github.io/post/intersection-of-two-linked-lists/</link><pubDate>Fri, 24 Dec 2021 08:29:53 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/intersection-of-two-linked-lists/</guid><description>&lt;p>给你两个单链表的头节点  &lt;code>headA&lt;/code> 和 &lt;code>headB&lt;/code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 &lt;code>null&lt;/code> 。&lt;/p>
&lt;p>图示两个链表在节点 &lt;code>c1&lt;/code> 开始相交 &lt;strong>：&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://tategotoazarasi.github.io/images/160_statement.png" alt="">&lt;/p>
&lt;p>题目数据 &lt;strong>保证&lt;/strong> 整个链式结构中不存在环。&lt;/p></description></item><item><title>LeetCode 119. 杨辉三角 II</title><link>https://tategotoazarasi.github.io/post/pascals-triangle-ii/</link><pubDate>Mon, 20 Dec 2021 11:13:00 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/pascals-triangle-ii/</guid><description>&lt;p>给定一个非负索引 &lt;code>rowIndex&lt;/code>，返回「杨辉三角」的第 &lt;code>rowIndex&lt;/code> 行。&lt;/p>
&lt;p>在「杨辉三角」中，每个数是它左上方和右上方的数的和。&lt;/p></description></item><item><title>LeetCode 28. 实现 strStr()</title><link>https://tategotoazarasi.github.io/post/implement-strstr/</link><pubDate>Tue, 07 Dec 2021 10:17:21 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/implement-strstr/</guid><description>&lt;p>实现 &lt;a href="https://baike.baidu.com/item/strstr/811469">strStr()&lt;/a> 函数。&lt;/p>
&lt;p>给你两个字符串 &lt;code>haystack&lt;/code> 和 &lt;code>needle&lt;/code> ，请你在 &lt;code>haystack&lt;/code> 字符串中找出 &lt;code>needle&lt;/code> 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回 &lt;code>-1&lt;/code> 。&lt;/p></description></item></channel></rss>