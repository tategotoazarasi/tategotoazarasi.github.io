<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>中等 on Harp Seal Pup Nursery and Caring Center</title><link>https://tategotoazarasi.github.io/tags/%E4%B8%AD%E7%AD%89/</link><description>Recent content in 中等 on Harp Seal Pup Nursery and Caring Center</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 03 Feb 2022 20:03:54 +0800</lastBuildDate><atom:link href="https://tategotoazarasi.github.io/tags/%E4%B8%AD%E7%AD%89/index.xml" rel="self" type="application/rss+xml"/><item><title>LeetCode 1414. 和为 K 的最少斐波那契数字数目</title><link>https://tategotoazarasi.github.io/post/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k/</link><pubDate>Thu, 03 Feb 2022 20:03:54 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k/</guid><description>&lt;p>给你数字 &lt;code>k&lt;/code> ，请你返回和为  &lt;code>k&lt;/code>  的斐波那契数字的最少数目，其中，每个斐波那契数字都可以被使用多次。&lt;/p>
&lt;p>斐波那契数字定义为：&lt;/p>
&lt;ul>
&lt;li>\(F_1 = 1\)&lt;/li>
&lt;li>\(F_2 = 1\)&lt;/li>
&lt;li>\(F_n = F_{n-1} + F_{n-2}\)， 其中 n &amp;gt; 2 。&lt;/li>
&lt;/ul>
&lt;p>数据保证对于给定的 &lt;code>k&lt;/code> ，一定能找到可行解。&lt;/p></description></item><item><title>LeetCode 176. 第二高的薪水</title><link>https://tategotoazarasi.github.io/post/second-highest-salary/</link><pubDate>Sat, 29 Jan 2022 10:28:00 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/second-highest-salary/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">Create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">If&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">Truncate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;100&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;200&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;300&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Employee&lt;/code> 表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>salary&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id 是这个表的主键。
表的每一行包含员工的工资信息。&lt;/p>
&lt;p>编写一个 SQL 查询，获取并返回 &lt;code>Employee&lt;/code>  表中第二高的薪水 。如果不存在第二高的薪水，查询应该返回 &lt;code>null&lt;/code> 。&lt;/p>
&lt;p>查询结果如下例所示。&lt;/p></description></item><item><title>LeetCode 1996. 游戏中弱角色的数量</title><link>https://tategotoazarasi.github.io/post/the-number-of-weak-characters-in-the-game/</link><pubDate>Fri, 28 Jan 2022 10:27:51 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/the-number-of-weak-characters-in-the-game/</guid><description>&lt;p>你正在参加一个多角色游戏，每个角色都有两个主要属性：&lt;strong>攻击&lt;/strong> 和 &lt;strong>防御&lt;/strong> 。给你一个二维整数数组 &lt;code>properties&lt;/code> ，其中 \(properties[i] = [attack_i, defense_i]\) 表示游戏中第 &lt;code>i&lt;/code> 个角色的属性。&lt;/p>
&lt;p>如果存在一个其他角色的攻击和防御等级 &lt;strong>都严格高于&lt;/strong> 该角色的攻击和防御等级，则认为该角色为 &lt;strong>弱角色&lt;/strong> 。更正式地，如果认为角色 &lt;code>i&lt;/code> &lt;strong>弱于&lt;/strong> 存在的另一个角色 &lt;code>j&lt;/code> ，那么 \(attack_j &amp;gt; attack_i\) 且 \(defense_j &amp;gt; defense_i\) 。&lt;/p>
&lt;p>返回 &lt;strong>弱角色&lt;/strong> 的数量。&lt;/p></description></item><item><title>LeetCode 5982. 解决智力问题</title><link>https://tategotoazarasi.github.io/post/solving-questions-with-brainpower/</link><pubDate>Sun, 16 Jan 2022 12:19:00 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/solving-questions-with-brainpower/</guid><description>&lt;p>给你一个下标从 &lt;strong>0&lt;/strong>  开始的二维整数数组  &lt;code>questions&lt;/code> ，其中 \(questions[i] = [points_i, brainpower_i]\)。&lt;/p>
&lt;p>这个数组表示一场考试里的一系列题目，你需要 &lt;strong>按顺序&lt;/strong> （也就是从问题 &lt;code>0&lt;/code> 开始依次解决），针对每个问题选择 &lt;strong>解决&lt;/strong>  或者 &lt;strong>跳过&lt;/strong>  操作。解决问题 &lt;code>i&lt;/code>  将让你 &lt;strong>获得&lt;/strong> \(points_i\) 的分数，但是你将 &lt;strong>无法&lt;/strong>  解决接下来的 \(brainpower_i\) 个问题（即只能跳过接下来的 \(brainpower_i\) 个问题）。如果你跳过问题  &lt;code>i&lt;/code> ，你可以对下一个问题决定使用哪种操作。&lt;/p>
&lt;ul>
&lt;li>比方说，给你  &lt;code>questions = [[3, 2], [4, 3], [4, 4], [2, 5]]&lt;/code> ：
&lt;ul>
&lt;li>如果问题  &lt;code>0&lt;/code>  被解决了， 那么你可以获得  &lt;code>3&lt;/code>  分，但你不能解决问题  &lt;code>1&lt;/code> 和  &lt;code>2&lt;/code> 。&lt;/li>
&lt;li>如果你跳过问题  &lt;code>0&lt;/code> ，且解决问题  &lt;code>1&lt;/code> ，你将获得 &lt;code>4&lt;/code> 分但是不能解决问题  &lt;code>2&lt;/code> 和  &lt;code>3&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>请你返回这场考试里你能获得的 &lt;strong>最高&lt;/strong>  分数。&lt;/p></description></item><item><title>LeetCode 382. 链表随机节点</title><link>https://tategotoazarasi.github.io/post/linked-list-random-node/</link><pubDate>Sun, 16 Jan 2022 10:00:10 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/linked-list-random-node/</guid><description>&lt;p>给你一个单链表，随机选择链表的一个节点，并返回相应的节点值。每个节点 &lt;strong>被选中的概率一样&lt;/strong> 。&lt;/p></description></item><item><title>LeetCode 5978. 统计追加字母可以获得的单词数</title><link>https://tategotoazarasi.github.io/post/count-words-obtained-after-adding-a-letter/</link><pubDate>Sun, 09 Jan 2022 18:43:16 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/count-words-obtained-after-adding-a-letter/</guid><description>&lt;p>给你两个下标从 &lt;strong>0&lt;/strong> 开始的字符串数组 &lt;code>startWords&lt;/code> 和 &lt;code>targetWords&lt;/code> 。每个字符串都仅由 &lt;strong>小写英文字母&lt;/strong> 组成。&lt;/p>
&lt;p>对于 &lt;code>targetWords&lt;/code> 中的每个字符串，检查是否能够从 &lt;code>startWords&lt;/code> 中选出一个字符串，执行一次 &lt;strong>转换操作&lt;/strong> ，得到的结果与当前  &lt;code>targetWords&lt;/code> 字符串相等。&lt;/p>
&lt;p>&lt;strong>转换操作&lt;/strong> 如下面两步所述：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>追加&lt;/strong> 任何 &lt;strong>不存在&lt;/strong> 于当前字符串的任一小写字母到当前字符串的末尾。
&lt;ul>
&lt;li>例如，如果字符串为 &lt;code>&amp;quot;abc&amp;quot;&lt;/code> ，那么字母 &lt;code>'d'&lt;/code>、&lt;code>'e'&lt;/code> 或 &lt;code>'y'&lt;/code> 都可以加到该字符串末尾，但 &lt;code>'a'&lt;/code> 就不行。如果追加的是 &lt;code>'d'&lt;/code> ，那么结果字符串为 &lt;code>&amp;quot;abcd&amp;quot;&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>重排&lt;/strong> 新字符串中的字母，可以按 &lt;strong>任意&lt;/strong> 顺序重新排布字母。
&lt;ul>
&lt;li>例如，&lt;code>&amp;quot;abcd&amp;quot;&lt;/code> 可以重排为 &lt;code>&amp;quot;acbd&amp;quot;&lt;/code>、&lt;code>&amp;quot;bacd&amp;quot;&lt;/code>、&lt;code>&amp;quot;cbda&amp;quot;&lt;/code>，以此类推。注意，它也可以重排为 &lt;code>&amp;quot;abcd&amp;quot;&lt;/code> 自身。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>找出 &lt;code>targetWords&lt;/code> 中有多少字符串能够由  &lt;code>startWords&lt;/code> 中的 &lt;strong>任一&lt;/strong> 字符串执行上述转换操作获得。返回 &lt;code>targetWords&lt;/code> 中这类 &lt;strong>字符串的数目&lt;/strong> 。&lt;/p></description></item><item><title>LeetCode 89. 格雷编码</title><link>https://tategotoazarasi.github.io/post/gray-code/</link><pubDate>Sat, 08 Jan 2022 16:57:11 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/gray-code/</guid><description>&lt;p>&lt;strong>n 位格雷码序列&lt;/strong> 是一个由 &lt;code>2n&lt;/code> 个整数组成的序列，其中：&lt;/p>
&lt;ul>
&lt;li>每个整数都在范围 &lt;code>[0, 2n - 1]&lt;/code> 内（含 &lt;code>0&lt;/code> 和 &lt;code>2n - 1&lt;/code>）&lt;/li>
&lt;li>第一个整数是 &lt;code>0&lt;/code>&lt;/li>
&lt;li>一个整数在序列中出现 &lt;strong>不超过一次&lt;/strong>&lt;/li>
&lt;li>每对 &lt;strong>相邻&lt;/strong> 整数的二进制表示 &lt;strong>恰好一位不同&lt;/strong> ，且&lt;/li>
&lt;li>&lt;strong>第一个&lt;/strong> 和 &lt;strong>最后一个&lt;/strong> 整数的二进制表示 &lt;strong>恰好一位不同&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>给你一个整数 &lt;code>n&lt;/code> ，返回任一有效的 &lt;strong>n 位格雷码序列&lt;/strong> 。&lt;/p></description></item><item><title>AcWing 2019. 拖拉机</title><link>https://tategotoazarasi.github.io/post/acwing2019/</link><pubDate>Wed, 05 Jan 2022 10:59:26 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/acwing2019/</guid><description>&lt;p>干了一整天的活，农夫约翰完全忘记了他把拖拉机落在田地中央了。&lt;/p>
&lt;p>他的奶牛非常调皮，决定对约翰来场恶作剧。&lt;/p>
&lt;p>她们在田地的不同地方放了 N 捆干草，这样一来，约翰想要开走拖拉机就必须先移除一些干草捆。拖拉机的位置以及 N 捆干草的位置都是二维平面上的整数坐标点。&lt;/p>
&lt;p>拖拉机的初始位置上没有干草捆。&lt;/p>
&lt;p>当约翰驾驶拖拉机时，他只能沿平行于坐标轴的方向（北，南，东和西）移动拖拉机，并且拖拉机必须每次移动整数距离。&lt;/p>
&lt;p>例如，驾驶拖拉机先向北移动 2 单位长度，然后向东移动 3 单位长度。&lt;/p>
&lt;p>拖拉机无法移动到干草捆占据的位置。&lt;/p>
&lt;p>请帮助约翰确定他需要移除的干草捆的最小数量，以便他能够将拖拉机开到二维平面的原点。&lt;/p></description></item><item><title>LeetCode 390. 消除游戏</title><link>https://tategotoazarasi.github.io/post/elimination-game/</link><pubDate>Sun, 02 Jan 2022 17:04:49 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/elimination-game/</guid><description>&lt;p>给定一个从 1 到 n 排序的整数列表。&lt;br>
首先，从左到右，从第一个数字开始，每隔一个数字进行删除，直到列表的末尾。&lt;br>
第二步，在剩下的数字中，从右到左，从倒数第一个数字开始，每隔一个数字进行删除，直到列表开头。&lt;br>
我们不断重复这两步，从左到右和从右到左交替进行，直到只剩下一个数字。&lt;br>
返回长度为 n 的列表中，最后剩下的数字。&lt;/p></description></item><item><title>AcWing 4204. 构造矩阵</title><link>https://tategotoazarasi.github.io/post/acwing4204/</link><pubDate>Sat, 01 Jan 2022 20:50:10 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/acwing4204/</guid><description>&lt;p>请你构造一个 n×n 的整数矩阵。要求，矩阵满足下列所有条件：&lt;/p>
&lt;ol>
&lt;li>矩阵中的所有元素的取值范围为 [0,n−1]。&lt;/li>
&lt;li>矩阵主对角线上的所有元素都为 0。主对角线是指从左上角到右下角这一斜线方向的对角线。&lt;/li>
&lt;li>该矩阵是对称矩阵。对称矩阵是指以主对角线为对称轴，各元素对应相等的矩阵。&lt;/li>
&lt;li>同一行上的所有元素两两不同。&lt;/li>
&lt;li>同一列上的所有元素两两不同。&lt;/li>
&lt;/ol></description></item><item><title>LeetCode 538. 把二叉搜索树转换为累加树</title><link>https://tategotoazarasi.github.io/post/convert-bst-to-greater-tree/</link><pubDate>Fri, 31 Dec 2021 11:55:26 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/convert-bst-to-greater-tree/</guid><description>&lt;p>给出二叉 &lt;strong>搜索&lt;/strong> 树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点 &lt;code>node&lt;/code>  的新值等于原树中大于或等于  &lt;code>node.val&lt;/code>  的值之和。&lt;/p></description></item><item><title>LeetCode 5965. 相同元素的间隔之和</title><link>https://tategotoazarasi.github.io/post/intervals-between-identical-elements/</link><pubDate>Sun, 26 Dec 2021 15:11:10 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/intervals-between-identical-elements/</guid><description>&lt;p>给你一个下标从 &lt;strong>0&lt;/strong> 开始、由 &lt;code>n&lt;/code> 个整数组成的数组 &lt;code>arr&lt;/code> 。&lt;/p>
&lt;p>&lt;code>arr&lt;/code> 中两个元素的 &lt;strong>间隔&lt;/strong> 定义为它们下标之间的 &lt;strong>绝对差&lt;/strong> 。更正式地，&lt;code>arr[i]&lt;/code> 和 &lt;code>arr[j]&lt;/code> 之间的间隔是 &lt;code>|i - j|&lt;/code> 。&lt;/p>
&lt;p>返回一个长度为 &lt;code>n&lt;/code> 的数组  &lt;code>intervals&lt;/code> ，其中 &lt;code>intervals[i]&lt;/code> 是 &lt;code>arr[i]&lt;/code> 和 &lt;code>arr&lt;/code> 中每个相同元素（与 &lt;code>arr[i]&lt;/code> 的值相同）的 &lt;strong>间隔之和&lt;/strong> &lt;em>。&lt;/em>&lt;/p></description></item><item><title>LeetCode 5948. 判断一个括号字符串是否有效</title><link>https://tategotoazarasi.github.io/post/check-if-a-parentheses-string-can-be-valid/</link><pubDate>Sun, 26 Dec 2021 09:22:53 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/check-if-a-parentheses-string-can-be-valid/</guid><description>&lt;p>一个括号字符串是只由  &lt;code>'('&lt;/code> 和  &lt;code>')'&lt;/code>  组成的  &lt;strong>非空&lt;/strong>  字符串。如果一个字符串满足下面 &lt;strong>任意&lt;/strong>  一个条件，那么它就是有效的：&lt;/p>
&lt;ul>
&lt;li>字符串为  &lt;code>()&lt;/code>.&lt;/li>
&lt;li>它可以表示为 &lt;code>AB&lt;/code>（&lt;code>A&lt;/code>  与  &lt;code>B&lt;/code>  连接），其中&lt;code>A&lt;/code> 和  &lt;code>B&lt;/code>  都是有效括号字符串。&lt;/li>
&lt;li>它可以表示为  &lt;code>(A)&lt;/code> ，其中  &lt;code>A&lt;/code>  是一个有效括号字符串。&lt;/li>
&lt;/ul>
&lt;p>给你一个括号字符串  &lt;code>s&lt;/code>  和一个字符串  &lt;code>locked&lt;/code> ，两者长度都为  &lt;code>n&lt;/code> 。&lt;code>locked&lt;/code>  是一个二进制字符串，只包含  &lt;code>'0'&lt;/code>  和  &lt;code>'1'&lt;/code> 。对于  &lt;code>locked&lt;/code>  中  &lt;strong>每一个&lt;/strong>  下标  &lt;code>i&lt;/code> ：&lt;/p>
&lt;ul>
&lt;li>如果  &lt;code>locked[i]&lt;/code>  是  &lt;code>'1'&lt;/code> ，你 &lt;strong>不能&lt;/strong>  改变  &lt;code>s[i]&lt;/code> 。&lt;/li>
&lt;li>如果  &lt;code>locked[i]&lt;/code>  是  &lt;code>'0'&lt;/code> ，你  &lt;strong>可以&lt;/strong>  将  &lt;code>s[i]&lt;/code>  变为  &lt;code>'('&lt;/code>  或者  &lt;code>')'&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;p>如果你可以将 &lt;code>s&lt;/code>  变为有效括号字符串，请你返回  &lt;code>true&lt;/code> ，否则返回  &lt;code>false&lt;/code> 。&lt;/p></description></item><item><title>AcWing 4201. 01数</title><link>https://tategotoazarasi.github.io/post/acwing4201/</link><pubDate>Sat, 25 Dec 2021 21:22:38 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/acwing4201/</guid><description>&lt;p>如果一个&lt;strong>正整数&lt;/strong>，其各个数位上的数字均满足要么是 0，要么是 1，则称该数字为 01 数。&lt;/p>
&lt;p>例如，1 和 10 都是 01 数。&lt;/p>
&lt;p>给定一个整数 n。&lt;/p>
&lt;p>请你计算，1∼n 中有多少个 01 数。&lt;/p></description></item></channel></rss>