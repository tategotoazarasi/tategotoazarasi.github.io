<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>动态规划 on Harp Seal Pup Nursery and Caring Center</title><link>https://tategotoazarasi.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link><description>Recent content in 动态规划 on Harp Seal Pup Nursery and Caring Center</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 12 Feb 2024 07:02:08 +0000</lastBuildDate><atom:link href="https://tategotoazarasi.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/index.xml" rel="self" type="application/rss+xml"/><item><title>LeetCode 44. 通配符匹配</title><link>https://tategotoazarasi.github.io/post/wildcard-matching/</link><pubDate>Tue, 06 Dec 2022 14:03:07 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/wildcard-matching/</guid><description>&lt;p>给定一个字符串  (&lt;code>s&lt;/code>) 和一个字符模式  (&lt;code>p&lt;/code>)，实现一个支持  &lt;code>'?'&lt;/code>  和  &lt;code>'*'&lt;/code>  的通配符匹配。&lt;/p></description></item><item><title>LeetCode 329. 矩阵中的最长递增路径</title><link>https://tategotoazarasi.github.io/post/longest-increasing-path-in-a-matrix/</link><pubDate>Mon, 19 Sep 2022 13:41:55 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/longest-increasing-path-in-a-matrix/</guid><description>&lt;p>给定一个  &lt;code>m x n&lt;/code> 整数矩阵  &lt;code>matrix&lt;/code> ，找出其中 &lt;strong>最长递增路径&lt;/strong> 的长度。&lt;/p>
&lt;p>对于每个单元格，你可以往上，下，左，右四个方向移动。 你 &lt;strong>不能&lt;/strong> 在 &lt;strong>对角线&lt;/strong> 方向上移动或移动到 &lt;strong>边界外&lt;/strong>（即不允许环绕）。&lt;/p></description></item><item><title>LeetCode 174. Dungeon Game</title><link>https://tategotoazarasi.github.io/post/dungeon-game/</link><pubDate>Tue, 13 Sep 2022 17:00:13 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/dungeon-game/</guid><description>&lt;p>The demons had captured the princess and imprisoned her in &lt;strong>the bottom-right corner&lt;/strong> of a &lt;code>dungeon&lt;/code>. The &lt;code>dungeon&lt;/code> consists of &lt;code>m x n&lt;/code> rooms laid out in a 2D grid. Our valiant knight was initially positioned in &lt;strong>the top-left room&lt;/strong> and must fight his way through &lt;code>dungeon&lt;/code> to rescue the princess.&lt;/p>
&lt;p>The knight has an initial health point represented by a positive integer. If at any point his health point drops to &lt;code>0&lt;/code> or below, he dies immediately.&lt;/p>
&lt;p>Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight&amp;rsquo;s health (represented by positive integers).&lt;/p>
&lt;p>To reach the princess as quickly as possible, the knight decides to move only &lt;strong>rightward&lt;/strong> or &lt;strong>downward&lt;/strong> in each step.&lt;/p>
&lt;p>Return &lt;em>the knight&amp;rsquo;s minimum initial health so that he can rescue the princess&lt;/em>.&lt;/p></description></item><item><title>LeetCode 416. 分割等和子集</title><link>https://tategotoazarasi.github.io/post/partition-equal-subset-sum/</link><pubDate>Tue, 13 Sep 2022 15:17:46 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/partition-equal-subset-sum/</guid><description>&lt;p>给你一个 &lt;strong>只包含正整数&lt;/strong> 的 &lt;strong>非空&lt;/strong> 数组  &lt;code>nums&lt;/code>。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。&lt;/p></description></item><item><title>LeetCode 486. 预测赢家</title><link>https://tategotoazarasi.github.io/post/predict-the-winner/</link><pubDate>Tue, 13 Sep 2022 13:43:09 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/predict-the-winner/</guid><description>&lt;p>给你一个整数数组 &lt;code>nums&lt;/code> 。玩家 1 和玩家 2 基于这个数组设计了一个游戏。&lt;/p>
&lt;p>玩家 1 和玩家 2 轮流进行自己的回合，玩家 1 先手。开始时，两个玩家的初始分值都是 &lt;code>0&lt;/code>。每一回合，玩家从数组的任意一端取一个数字（即，&lt;code>nums[0]&lt;/code> 或&lt;code>nums[nums.length - 1]&lt;/code>），取到的数字将会从数组中移除（数组长度减 &lt;code>1&lt;/code>）。玩家选中的数字将会加到他的得分上。当数组中没有剩余数字可取时，游戏结束。&lt;/p>
&lt;p>如果玩家 1 能成为赢家，返回 &lt;code>true&lt;/code> 。如果两个玩家得分相等，同样认为玩家 1 是游戏的赢家，也返回 &lt;code>true&lt;/code>。你可以假设每个玩家的玩法都会使他的分数最大化。&lt;/p></description></item><item><title>LeetCode 85. 最大矩形</title><link>https://tategotoazarasi.github.io/post/maximal-rectangle/</link><pubDate>Tue, 13 Sep 2022 12:53:39 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/maximal-rectangle/</guid><description>&lt;p>给定一个仅包含  &lt;code>0&lt;/code> 和 &lt;code>1&lt;/code> 、大小为 &lt;code>rows x cols&lt;/code> 的二维二进制矩阵，找出只包含 &lt;code>1&lt;/code> 的最大矩形，并返回其面积。&lt;/p></description></item><item><title>LeetCode 309. 最佳买卖股票时机含冷冻期</title><link>https://tategotoazarasi.github.io/post/best-time-to-buy-and-sell-stock-with-cooldown/</link><pubDate>Thu, 08 Sep 2022 14:15:02 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/best-time-to-buy-and-sell-stock-with-cooldown/</guid><description>&lt;p>给定一个整数数组&lt;code>prices&lt;/code>，其中第  &lt;code>prices[i]&lt;/code>  表示第  &lt;code>i&lt;/code>  天的股票价格。​&lt;/p>
&lt;p>设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:&lt;/p>
&lt;ul>
&lt;li>卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。&lt;/li>
&lt;/ul></description></item><item><title>LeetCode 435. Non-overlapping Intervals</title><link>https://tategotoazarasi.github.io/post/non-overlapping-intervals/</link><pubDate>Sun, 26 Jun 2022 13:49:43 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/non-overlapping-intervals/</guid><description>&lt;p>Given an array of intervals &lt;code>intervals&lt;/code> where \(intervals[i] = [start_i, end_i]\), return &lt;em>the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping&lt;/em>.&lt;/p></description></item><item><title>LeetCode 5. Longest Palindromic Substring</title><link>https://tategotoazarasi.github.io/post/longest-palindromic-substring/</link><pubDate>Wed, 08 Jun 2022 13:14:02 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/longest-palindromic-substring/</guid><description>&lt;p>Given a string &lt;code>s&lt;/code>, return &lt;em>the longest palindromic substring&lt;/em> in &lt;code>s&lt;/code>.&lt;/p></description></item><item><title>LeetCode 6023. Minimum White Tiles After Covering With Carpets</title><link>https://tategotoazarasi.github.io/post/minimum-white-tiles-after-covering-with-carpets/</link><pubDate>Sun, 20 Mar 2022 17:49:37 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/minimum-white-tiles-after-covering-with-carpets/</guid><description>&lt;p>You are given a &lt;strong>0-indexed binary&lt;/strong> string &lt;code>floor&lt;/code>, which represents the colors of tiles on a floor:&lt;/p>
&lt;ul>
&lt;li>&lt;code>floor[i] = '0'&lt;/code> denotes that the &lt;code>ith&lt;/code> tile of the floor is colored &lt;strong>black&lt;/strong>.&lt;/li>
&lt;li>On the other hand, &lt;code>floor[i] = '1'&lt;/code> denotes that the &lt;code>ith&lt;/code> tile of the floor is colored &lt;strong>white&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;p>You are also given &lt;code>numCarpets&lt;/code> and &lt;code>carpetLen&lt;/code>. You have &lt;code>numCarpets&lt;/code> &lt;strong>black&lt;/strong> carpets, each of length &lt;code>carpetLen&lt;/code> tiles. Cover the tiles with the given carpets such that the number of &lt;strong>white&lt;/strong> tiles still visible is &lt;strong>minimum&lt;/strong>. Carpets may overlap one another.&lt;/p>
&lt;p>Return &lt;em>the &lt;strong>minimum&lt;/strong> number of white tiles still visible.&lt;/em>&lt;/p></description></item><item><title>LeetCode 6011. 完成比赛的最少时间</title><link>https://tategotoazarasi.github.io/post/minimum-time-to-finish-the-race/</link><pubDate>Sun, 27 Feb 2022 16:35:07 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/minimum-time-to-finish-the-race/</guid><description>&lt;p>给你一个下标从 &lt;strong>0&lt;/strong>  开始的二维整数数组  &lt;code>tires&lt;/code> ，其中  \(tires[i] = [f_i, r_i]\)  表示第  &lt;code>i&lt;/code>  种轮胎如果连续使用，第  &lt;code>x&lt;/code>  圈需要耗时  \(f_i * r_i^{(x-1)}\)  秒。&lt;/p>
&lt;ul>
&lt;li>比方说，如果  \(f_i = 3\)  且  \(r_i = 2\) ，且一直使用这种类型的同一条轮胎，那么该轮胎完成第  &lt;code>1&lt;/code>  圈赛道耗时 &lt;code>3&lt;/code>  秒，完成第 &lt;code>2&lt;/code>  圈耗时  &lt;code>3 * 2 = 6&lt;/code>  秒，完成第 &lt;code>3&lt;/code>  圈耗时  \(3 * 2^2 = 12\)  秒，依次类推。&lt;/li>
&lt;/ul>
&lt;p>同时给你一个整数  &lt;code>changeTime&lt;/code>  和一个整数  &lt;code>numLaps&lt;/code> 。&lt;/p>
&lt;p>比赛总共包含  &lt;code>numLaps&lt;/code>  圈，你可以选择 &lt;strong>任意&lt;/strong>  一种轮胎开始比赛。每一种轮胎都有 &lt;strong>无数条&lt;/strong> 。每一圈后，你可以选择耗费 &lt;code>changeTime&lt;/code>  秒 &lt;strong>换成&lt;/strong>  任意一种轮胎（也可以换成当前种类的新轮胎）。&lt;/p>
&lt;p>请你返回完成比赛需要耗费的 &lt;strong>最少&lt;/strong>  时间。&lt;/p></description></item><item><title>LeetCode 1994. 好子集的数目</title><link>https://tategotoazarasi.github.io/post/the-number-of-good-subsets/</link><pubDate>Tue, 22 Feb 2022 09:23:56 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/the-number-of-good-subsets/</guid><description>&lt;p>给你一个整数数组  &lt;code>nums&lt;/code> 。如果  &lt;code>nums&lt;/code>  的一个子集中，所有元素的乘积可以表示为一个或多个 &lt;strong>互不相同的质数&lt;/strong> 的乘积，那么我们称它为  &lt;strong>好子集&lt;/strong> 。&lt;/p>
&lt;ul>
&lt;li>比方说，如果  &lt;code>nums = [1, 2, 3, 4]&lt;/code> ：
&lt;ul>
&lt;li>&lt;code>[2, 3]&lt;/code> ，&lt;code>[1, 2, 3]&lt;/code>  和  &lt;code>[1, 3]&lt;/code>  是 &lt;strong>好&lt;/strong>  子集，乘积分别为  &lt;code>6 = 2*3&lt;/code> ，&lt;code>6 = 2*3&lt;/code>  和  &lt;code>3 = 3&lt;/code> 。&lt;/li>
&lt;li>&lt;code>[1, 4]&lt;/code> 和  &lt;code>[4]&lt;/code>  不是 &lt;strong>好&lt;/strong>  子集，因为乘积分别为  &lt;code>4 = 2*2&lt;/code> 和  &lt;code>4 = 2*2&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>请你返回 &lt;code>nums&lt;/code>  中不同的  &lt;strong>好&lt;/strong>  子集的数目对 &lt;code>109 + 7&lt;/code> &lt;strong>取余&lt;/strong>  的结果。&lt;/p>
&lt;p>&lt;code>nums&lt;/code>  中的 &lt;strong>子集&lt;/strong>  是通过删除 &lt;code>nums&lt;/code>  中一些（可能一个都不删除，也可能全部都删除）元素后剩余元素组成的数组。如果两个子集删除的下标不同，那么它们被视为不同的子集。&lt;/p></description></item><item><title>LeetCode 6007. 数组的最大与和</title><link>https://tategotoazarasi.github.io/post/maximum-and-sum-of-array/</link><pubDate>Sun, 13 Feb 2022 15:34:49 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/maximum-and-sum-of-array/</guid><description>&lt;p>给你一个长度为  &lt;code>n&lt;/code>  的整数数组  &lt;code>nums&lt;/code>  和一个整数  &lt;code>numSlots&lt;/code> ，满足&lt;code>2 * numSlots &amp;gt;= n&lt;/code> 。总共有  &lt;code>numSlots&lt;/code>  个篮子，编号为  &lt;code>1&lt;/code>  到  &lt;code>numSlots&lt;/code> 。&lt;/p>
&lt;p>你需要把所有  &lt;code>n&lt;/code>  个整数分到这些篮子中，且每个篮子 &lt;strong>至多&lt;/strong>  有 2 个整数。一种分配方案的 &lt;strong>与和&lt;/strong>  定义为每个数与它所在篮子编号的 &lt;strong>按位与运算&lt;/strong>  结果之和。&lt;/p>
&lt;ul>
&lt;li>比方说，将数字  &lt;code>[1, 3]&lt;/code>  放入篮子  &lt;strong>&lt;em>&lt;code>1&lt;/code>&lt;/em>&lt;/strong>  中，&lt;code>[4, 6]&lt;/code> 放入篮子  &lt;strong>&lt;em>&lt;code>2&lt;/code>&lt;/em>&lt;/strong>  中，这个方案的与和为  &lt;code>(1 AND 1) + (3 AND 1) + (4 AND 2) + (6 AND 2) = 1 + 1 + 0 + 2 = 4&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;p>请你返回将 &lt;code>nums&lt;/code>  中所有数放入 &lt;code>numSlots&lt;/code>  个篮子中的最大与和。&lt;/p></description></item><item><title>LeetCode 5982. 解决智力问题</title><link>https://tategotoazarasi.github.io/post/solving-questions-with-brainpower/</link><pubDate>Sun, 16 Jan 2022 12:19:00 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/solving-questions-with-brainpower/</guid><description>&lt;p>给你一个下标从 &lt;strong>0&lt;/strong>  开始的二维整数数组  &lt;code>questions&lt;/code> ，其中 \(questions[i] = [points_i, brainpower_i]\)。&lt;/p>
&lt;p>这个数组表示一场考试里的一系列题目，你需要 &lt;strong>按顺序&lt;/strong> （也就是从问题 &lt;code>0&lt;/code> 开始依次解决），针对每个问题选择 &lt;strong>解决&lt;/strong>  或者 &lt;strong>跳过&lt;/strong>  操作。解决问题 &lt;code>i&lt;/code>  将让你 &lt;strong>获得&lt;/strong> \(points_i\) 的分数，但是你将 &lt;strong>无法&lt;/strong>  解决接下来的 \(brainpower_i\) 个问题（即只能跳过接下来的 \(brainpower_i\) 个问题）。如果你跳过问题  &lt;code>i&lt;/code> ，你可以对下一个问题决定使用哪种操作。&lt;/p>
&lt;ul>
&lt;li>比方说，给你  &lt;code>questions = [[3, 2], [4, 3], [4, 4], [2, 5]]&lt;/code> ：
&lt;ul>
&lt;li>如果问题  &lt;code>0&lt;/code>  被解决了， 那么你可以获得  &lt;code>3&lt;/code>  分，但你不能解决问题  &lt;code>1&lt;/code> 和  &lt;code>2&lt;/code> 。&lt;/li>
&lt;li>如果你跳过问题  &lt;code>0&lt;/code> ，且解决问题  &lt;code>1&lt;/code> ，你将获得 &lt;code>4&lt;/code> 分但是不能解决问题  &lt;code>2&lt;/code> 和  &lt;code>3&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>请你返回这场考试里你能获得的 &lt;strong>最高&lt;/strong>  分数。&lt;/p></description></item><item><title>LeetCode 913. 猫和老鼠</title><link>https://tategotoazarasi.github.io/post/cat-and-mouse/</link><pubDate>Tue, 04 Jan 2022 22:08:53 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/cat-and-mouse/</guid><description>&lt;p>两位玩家分别扮演猫和老鼠，在一张 &lt;strong>无向&lt;/strong> 图上进行游戏，两人轮流行动。&lt;/p>
&lt;p>图的形式是：&lt;code>graph[a]&lt;/code> 是一个列表，由满足 &lt;code>ab&lt;/code> 是图中的一条边的所有节点 &lt;code>b&lt;/code> 组成。&lt;/p>
&lt;p>老鼠从节点 &lt;code>1&lt;/code> 开始，第一个出发；猫从节点 &lt;code>2&lt;/code> 开始，第二个出发。在节点 &lt;code>0&lt;/code> 处有一个洞。&lt;/p>
&lt;p>在每个玩家的行动中，他们 &lt;strong>必须&lt;/strong> 沿着图中与所在当前位置连通的一条边移动。例如，如果老鼠在节点 &lt;code>1&lt;/code> ，那么它必须移动到 &lt;code>graph[1]&lt;/code> 中的任一节点。&lt;/p>
&lt;p>此外，猫无法移动到洞中（节点 &lt;code>0&lt;/code>）。&lt;/p>
&lt;p>然后，游戏在出现以下三种情形之一时结束：&lt;/p>
&lt;ul>
&lt;li>如果猫和老鼠出现在同一个节点，猫获胜。&lt;/li>
&lt;li>如果老鼠到达洞中，老鼠获胜。&lt;/li>
&lt;li>如果某一位置重复出现（即，玩家的位置和移动顺序都与上一次行动相同），游戏平局。&lt;/li>
&lt;/ul>
&lt;p>给你一张图 &lt;code>graph&lt;/code> ，并假设两位玩家都都以最佳状态参与游戏：&lt;/p>
&lt;ul>
&lt;li>如果老鼠获胜，则返回 &lt;code>1&lt;/code>；&lt;/li>
&lt;li>如果猫获胜，则返回 &lt;code>2&lt;/code>；&lt;/li>
&lt;li>如果平局，则返回 &lt;code>0&lt;/code> 。&lt;/li>
&lt;/ul></description></item><item><title>LeetCode 472. 连接词</title><link>https://tategotoazarasi.github.io/post/concatenated-words/</link><pubDate>Tue, 28 Dec 2021 15:56:48 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/concatenated-words/</guid><description>&lt;p>给你一个 &lt;strong>不含重复&lt;/strong> 单词的字符串数组 &lt;code>words&lt;/code> ，请你找出并返回 &lt;code>words&lt;/code> 中的所有 &lt;strong>连接词&lt;/strong> 。&lt;/p>
&lt;p>&lt;strong>连接词&lt;/strong> 定义为：一个完全由给定数组中的至少两个较短单词组成的字符串。&lt;/p></description></item><item><title>LeetCode 119. 杨辉三角 II</title><link>https://tategotoazarasi.github.io/post/pascals-triangle-ii/</link><pubDate>Mon, 20 Dec 2021 11:13:00 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/pascals-triangle-ii/</guid><description>&lt;p>给定一个非负索引 &lt;code>rowIndex&lt;/code>，返回「杨辉三角」的第 &lt;code>rowIndex&lt;/code> 行。&lt;/p>
&lt;p>在「杨辉三角」中，每个数是它左上方和右上方的数的和。&lt;/p></description></item></channel></rss>