<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>动态规划 on Harp Seal Pup Nursery and Caring Center</title><link>https://tategotoazarasi.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link><description>Recent content in 动态规划 on Harp Seal Pup Nursery and Caring Center</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 20 Dec 2021 11:17:54 +0800</lastBuildDate><atom:link href="https://tategotoazarasi.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/index.xml" rel="self" type="application/rss+xml"/><item><title>LeetCode 121. 买卖股票的最佳时机</title><link>https://tategotoazarasi.github.io/post/best-time-to-buy-and-sell-stock/</link><pubDate>Mon, 20 Dec 2021 11:17:54 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/best-time-to-buy-and-sell-stock/</guid><description>&lt;p>给定一个数组 &lt;code>prices&lt;/code> ，它的第  &lt;code>i&lt;/code> 个元素  &lt;code>prices[i]&lt;/code> 表示一支给定股票第 &lt;code>i&lt;/code> 天的价格。&lt;/p>
&lt;p>你只能选择 &lt;strong>某一天&lt;/strong> 买入这只股票，并选择在 &lt;strong>未来的某一个不同的日子&lt;/strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。&lt;/p>
&lt;p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 &lt;code>0&lt;/code> 。&lt;/p></description></item><item><title>LeetCode 119. 杨辉三角 II</title><link>https://tategotoazarasi.github.io/post/pascals-triangle-ii/</link><pubDate>Mon, 20 Dec 2021 11:13:00 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/pascals-triangle-ii/</guid><description>&lt;p>给定一个非负索引 &lt;code>rowIndex&lt;/code>，返回「杨辉三角」的第 &lt;code>rowIndex&lt;/code> 行。&lt;/p>
&lt;p>在「杨辉三角」中，每个数是它左上方和右上方的数的和。&lt;/p></description></item><item><title>LeetCode 118. 杨辉三角</title><link>https://tategotoazarasi.github.io/post/pascals-triangle/</link><pubDate>Sun, 19 Dec 2021 13:19:32 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/pascals-triangle/</guid><description>&lt;p>给定一个非负整数  &lt;em>&lt;code>numRows&lt;/code>，&lt;/em> 生成「杨辉三角」的前  &lt;em>&lt;code>numRows&lt;/code>&lt;/em> 行。&lt;/p>
&lt;p>在「杨辉三角」中，每个数是它左上方和右上方的数的和。&lt;/p></description></item><item><title>LeetCode 70. 爬楼梯</title><link>https://tategotoazarasi.github.io/post/climbing-stairs/</link><pubDate>Sun, 12 Dec 2021 16:51:18 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/climbing-stairs/</guid><description>&lt;p>假设你正在爬楼梯。需要 &lt;em>n&lt;/em>  阶你才能到达楼顶。&lt;/p>
&lt;p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？&lt;/p></description></item><item><title>LeetCode 53. 最大子数组和</title><link>https://tategotoazarasi.github.io/post/maximum-subarray/</link><pubDate>Wed, 08 Dec 2021 10:12:55 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/maximum-subarray/</guid><description>&lt;p>给你一个整数数组 &lt;code>nums&lt;/code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。&lt;/p></description></item></channel></rss>