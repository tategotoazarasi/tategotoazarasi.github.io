<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>困难 on Harp Seal Pup Nursery and Caring Center</title><link>https://tategotoazarasi.github.io/tags/%E5%9B%B0%E9%9A%BE/</link><description>Recent content in 困难 on Harp Seal Pup Nursery and Caring Center</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 23 Mar 2022 15:27:10 +0800</lastBuildDate><atom:link href="https://tategotoazarasi.github.io/tags/%E5%9B%B0%E9%9A%BE/index.xml" rel="self" type="application/rss+xml"/><item><title>LeetCode 440. K-th Smallest in Lexicographical Order</title><link>https://tategotoazarasi.github.io/post/k-th-smallest-in-lexicographical-order/</link><pubDate>Wed, 23 Mar 2022 15:27:10 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/k-th-smallest-in-lexicographical-order/</guid><description>&lt;p>Given two integers &lt;code>n&lt;/code> and &lt;code>k&lt;/code>, return &lt;em>the&lt;/em> &lt;code>kth&lt;/code> &lt;em>lexicographically smallest integer in the range&lt;/em> &lt;code>[1, n]&lt;/code>.&lt;/p></description></item><item><title>LeetCode 6023. Minimum White Tiles After Covering With Carpets</title><link>https://tategotoazarasi.github.io/post/minimum-white-tiles-after-covering-with-carpets/</link><pubDate>Sun, 20 Mar 2022 17:49:37 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/minimum-white-tiles-after-covering-with-carpets/</guid><description>&lt;p>You are given a &lt;strong>0-indexed binary&lt;/strong> string &lt;code>floor&lt;/code>, which represents the colors of tiles on a floor:&lt;/p>
&lt;ul>
&lt;li>&lt;code>floor[i] = '0'&lt;/code> denotes that the &lt;code>ith&lt;/code> tile of the floor is colored &lt;strong>black&lt;/strong>.&lt;/li>
&lt;li>On the other hand, &lt;code>floor[i] = '1'&lt;/code> denotes that the &lt;code>ith&lt;/code> tile of the floor is colored &lt;strong>white&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;p>You are also given &lt;code>numCarpets&lt;/code> and &lt;code>carpetLen&lt;/code>. You have &lt;code>numCarpets&lt;/code> &lt;strong>black&lt;/strong> carpets, each of length &lt;code>carpetLen&lt;/code> tiles. Cover the tiles with the given carpets such that the number of &lt;strong>white&lt;/strong> tiles still visible is &lt;strong>minimum&lt;/strong>. Carpets may overlap one another.&lt;/p>
&lt;p>Return &lt;em>the &lt;strong>minimum&lt;/strong> number of white tiles still visible.&lt;/em>&lt;/p></description></item><item><title>LeetCode 6032. Minimum Weighted Subgraph With the Required Paths</title><link>https://tategotoazarasi.github.io/post/minimum-weighted-subgraph-with-the-required-paths/</link><pubDate>Sun, 13 Mar 2022 20:28:53 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/minimum-weighted-subgraph-with-the-required-paths/</guid><description>&lt;p>You are given an integer &lt;code>n&lt;/code> denoting the number of nodes of a &lt;strong>weighted directed&lt;/strong> graph. The nodes are numbered from &lt;code>0&lt;/code> to &lt;code>n - 1&lt;/code>.&lt;/p>
&lt;p>You are also given a 2D integer array &lt;code>edges&lt;/code> where \(edges[i] = [from_i, to_i, weight_i]\) denotes that there exists a &lt;strong>directed&lt;/strong> edge from \(from_i\) to \(to_i\) with weight \(weight_i\).&lt;/p>
&lt;p>Lastly, you are given three &lt;strong>distinct&lt;/strong> integers &lt;code>src1&lt;/code>, &lt;code>src2&lt;/code>, and &lt;code>dest&lt;/code> denoting three distinct nodes of the graph.&lt;/p>
&lt;p>Return &lt;em>the &lt;strong>minimum weight&lt;/strong> of a subgraph of the graph such that it is &lt;strong>possible&lt;/strong> to reach&lt;/em> &lt;code>dest&lt;/code> &lt;em>from both&lt;/em> &lt;code>src1&lt;/code> &lt;em>and&lt;/em> &lt;code>src2&lt;/code> &lt;em>via a set of edges of this subgraph&lt;/em>. In case such a subgraph does not exist, return &lt;code>-1&lt;/code>.&lt;/p>
&lt;p>A &lt;strong>subgraph&lt;/strong> is a graph whose vertices and edges are subsets of the original graph. The &lt;strong>weight&lt;/strong> of a subgraph is the sum of weights of its constituent edges.&lt;/p></description></item><item><title>LeetCode 798. Smallest Rotation with Highest Score</title><link>https://tategotoazarasi.github.io/post/smallest-rotation-with-highest-score/</link><pubDate>Wed, 09 Mar 2022 14:47:26 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/smallest-rotation-with-highest-score/</guid><description>&lt;p>You are given an array &lt;code>nums&lt;/code>. You can rotate it by a non-negative integer &lt;code>k&lt;/code> so that the array becomes &lt;code>[nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]&lt;/code>. Afterward, any entries that are less than or equal to their index are worth one point.&lt;/p>
&lt;ul>
&lt;li>For example, if we have &lt;code>nums = [2,4,1,3,0]&lt;/code>, and we rotate by &lt;code>k = 2&lt;/code>, it becomes &lt;code>[1,3,0,2,4]&lt;/code>. This is worth &lt;code>3&lt;/code> points because &lt;code>1 &amp;gt; 0&lt;/code> [no points], &lt;code>3 &amp;gt; 1&lt;/code> [no points], &lt;code>0 &amp;lt;= 2&lt;/code> [one point], &lt;code>2 &amp;lt;= 3&lt;/code> [one point], &lt;code>4 &amp;lt;= 4&lt;/code> [one point].&lt;/li>
&lt;/ul>
&lt;p>Return &lt;em>the rotation index&lt;/em> &lt;code>k&lt;/code> &lt;em>that corresponds to the highest score we can achieve if we rotated&lt;/em> &lt;code>nums&lt;/code> &lt;em>by it&lt;/em>. If there are multiple answers, return the smallest such index &lt;code>k&lt;/code>.&lt;/p></description></item><item><title>LeetCode 571. Find Median Given Frequency of Numbers</title><link>https://tategotoazarasi.github.io/post/find-median-given-frequency-of-numbers/</link><pubDate>Wed, 02 Mar 2022 11:09:05 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/find-median-given-frequency-of-numbers/</guid><description>&lt;p>Table: &lt;code>Numbers&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>num&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>frequency&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>num is the primary key for this table.
Each row of this table shows the frequency of a number in the database.&lt;/p>
&lt;p>The &lt;a href="https://en.wikipedia.org/wiki/Median">&lt;strong>median&lt;/strong>&lt;/a> is the value separating the higher half from the lower half of a data sample.&lt;/p>
&lt;p>Write an SQL query to report the &lt;strong>median&lt;/strong> of all the numbers in the database after decompressing the &lt;code>Numbers&lt;/code> table. Round the median to &lt;strong>one decimal point&lt;/strong>.&lt;/p></description></item><item><title>LeetCode 6011. 完成比赛的最少时间</title><link>https://tategotoazarasi.github.io/post/minimum-time-to-finish-the-race/</link><pubDate>Sun, 27 Feb 2022 16:35:07 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/minimum-time-to-finish-the-race/</guid><description>&lt;p>给你一个下标从 &lt;strong>0&lt;/strong>  开始的二维整数数组  &lt;code>tires&lt;/code> ，其中  \(tires[i] = [f_i, r_i]\)  表示第  &lt;code>i&lt;/code>  种轮胎如果连续使用，第  &lt;code>x&lt;/code>  圈需要耗时  \(f_i * r_i^{(x-1)}\)  秒。&lt;/p>
&lt;ul>
&lt;li>比方说，如果  \(f_i = 3\)  且  \(r_i = 2\) ，且一直使用这种类型的同一条轮胎，那么该轮胎完成第  &lt;code>1&lt;/code>  圈赛道耗时 &lt;code>3&lt;/code>  秒，完成第 &lt;code>2&lt;/code>  圈耗时  &lt;code>3 * 2 = 6&lt;/code>  秒，完成第 &lt;code>3&lt;/code>  圈耗时  \(3 * 2^2 = 12\)  秒，依次类推。&lt;/li>
&lt;/ul>
&lt;p>同时给你一个整数  &lt;code>changeTime&lt;/code>  和一个整数  &lt;code>numLaps&lt;/code> 。&lt;/p>
&lt;p>比赛总共包含  &lt;code>numLaps&lt;/code>  圈，你可以选择 &lt;strong>任意&lt;/strong>  一种轮胎开始比赛。每一种轮胎都有 &lt;strong>无数条&lt;/strong> 。每一圈后，你可以选择耗费 &lt;code>changeTime&lt;/code>  秒 &lt;strong>换成&lt;/strong>  任意一种轮胎（也可以换成当前种类的新轮胎）。&lt;/p>
&lt;p>请你返回完成比赛需要耗费的 &lt;strong>最少&lt;/strong>  时间。&lt;/p></description></item><item><title>LeetCode 1994. 好子集的数目</title><link>https://tategotoazarasi.github.io/post/the-number-of-good-subsets/</link><pubDate>Tue, 22 Feb 2022 09:23:56 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/the-number-of-good-subsets/</guid><description>&lt;p>给你一个整数数组  &lt;code>nums&lt;/code> 。如果  &lt;code>nums&lt;/code>  的一个子集中，所有元素的乘积可以表示为一个或多个 &lt;strong>互不相同的质数&lt;/strong> 的乘积，那么我们称它为  &lt;strong>好子集&lt;/strong> 。&lt;/p>
&lt;ul>
&lt;li>比方说，如果  &lt;code>nums = [1, 2, 3, 4]&lt;/code> ：
&lt;ul>
&lt;li>&lt;code>[2, 3]&lt;/code> ，&lt;code>[1, 2, 3]&lt;/code>  和  &lt;code>[1, 3]&lt;/code>  是 &lt;strong>好&lt;/strong>  子集，乘积分别为  &lt;code>6 = 2*3&lt;/code> ，&lt;code>6 = 2*3&lt;/code>  和  &lt;code>3 = 3&lt;/code> 。&lt;/li>
&lt;li>&lt;code>[1, 4]&lt;/code> 和  &lt;code>[4]&lt;/code>  不是 &lt;strong>好&lt;/strong>  子集，因为乘积分别为  &lt;code>4 = 2*2&lt;/code> 和  &lt;code>4 = 2*2&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>请你返回 &lt;code>nums&lt;/code>  中不同的  &lt;strong>好&lt;/strong>  子集的数目对 &lt;code>109 + 7&lt;/code> &lt;strong>取余&lt;/strong>  的结果。&lt;/p>
&lt;p>&lt;code>nums&lt;/code>  中的 &lt;strong>子集&lt;/strong>  是通过删除 &lt;code>nums&lt;/code>  中一些（可能一个都不删除，也可能全部都删除）元素后剩余元素组成的数组。如果两个子集删除的下标不同，那么它们被视为不同的子集。&lt;/p></description></item><item><title>LeetCode 6015. 统计可以被 K 整除的下标对数目</title><link>https://tategotoazarasi.github.io/post/count-array-pairs-divisible-by-k/</link><pubDate>Sun, 20 Feb 2022 12:30:41 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/count-array-pairs-divisible-by-k/</guid><description>&lt;p>给你一个下标从 &lt;strong>0&lt;/strong> 开始、长度为 &lt;code>n&lt;/code> 的整数数组 &lt;code>nums&lt;/code> 和一个整数 &lt;code>k&lt;/code> ，返回满足下述条件的下标对 &lt;code>(i, j)&lt;/code> 的数目：&lt;/p>
&lt;ul>
&lt;li>&lt;code>0 &amp;lt;= i &amp;lt; j &amp;lt;= n - 1&lt;/code> 且&lt;/li>
&lt;li>&lt;code>nums[i] * nums[j]&lt;/code> 能被 &lt;code>k&lt;/code> 整除。&lt;/li>
&lt;/ul></description></item><item><title>LeetCode 5999. 统计数组中好三元组数目</title><link>https://tategotoazarasi.github.io/post/count-good-triplets-in-an-array/</link><pubDate>Sun, 20 Feb 2022 09:30:44 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/count-good-triplets-in-an-array/</guid><description>&lt;p>给你两个下标从 &lt;strong>0&lt;/strong>  开始且长度为 &lt;code>n&lt;/code>  的整数数组  &lt;code>nums1&lt;/code>  和  &lt;code>nums2&lt;/code> ，两者都是  &lt;code>[0, 1, ..., n - 1]&lt;/code>  的  &lt;strong>排列&lt;/strong> 。&lt;/p>
&lt;p>&lt;strong>好三元组&lt;/strong> 指的是  &lt;code>3&lt;/code>  个  &lt;strong>互不相同&lt;/strong>  的值，且它们在数组  &lt;code>nums1&lt;/code> 和  &lt;code>nums2&lt;/code>  中出现顺序保持一致。换句话说，如果我们将  \(pos1_v\) 记为值  &lt;code>v&lt;/code>  在  &lt;code>nums1&lt;/code>  中出现的位置，\(pos2_v\  为值  &lt;code>v&lt;/code>  在  &lt;code>nums2&lt;/code>  中的位置，那么一个好三元组定义为  &lt;code>0 &amp;lt;= x, y, z &amp;lt;= n - 1&lt;/code> ，且  \(pos1_x &amp;lt; pos1_y &amp;lt; pos1_z\) 和  \(pos2_x &amp;lt; pos2_y &amp;lt; pos2_z\)  都成立的  &lt;code>(x, y, z)&lt;/code> 。&lt;/p>
&lt;p>请你返回好三元组的 &lt;strong>总数目&lt;/strong> 。&lt;/p></description></item><item><title>LeetCode 1719. Number Of Ways To Reconstruct A Tree</title><link>https://tategotoazarasi.github.io/post/number-of-ways-to-reconstruct-a-tree/</link><pubDate>Wed, 16 Feb 2022 12:23:57 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/number-of-ways-to-reconstruct-a-tree/</guid><description>&lt;p>You are given an array &lt;code>pairs&lt;/code>, where \(pairs[i] = [x_i, y_i]\), and:&lt;/p>
&lt;ul>
&lt;li>There are no duplicates.&lt;/li>
&lt;li>\(x_i &amp;lt; y_i\)&lt;/li>
&lt;/ul>
&lt;p>Let &lt;code>ways&lt;/code> be the number of rooted trees that satisfy the following conditions:&lt;/p>
&lt;ul>
&lt;li>The tree consists of nodes whose values appeared in &lt;code>pairs&lt;/code>.&lt;/li>
&lt;li>A pair \([x_i, y_i]\) exists in &lt;code>pairs&lt;/code> &lt;strong>if and only if&lt;/strong> \(x_i\) is an ancestor of \(y_i\) or \(y_i\) is an ancestor of \(x_i\).&lt;/li>
&lt;li>&lt;strong>Note:&lt;/strong> the tree does not have to be a binary tree.&lt;/li>
&lt;/ul>
&lt;p>Two ways are considered to be different if there is at least one node that has different parents in both ways.&lt;/p>
&lt;p>Return:&lt;/p>
&lt;ul>
&lt;li>&lt;code>0&lt;/code> if &lt;code>ways == 0&lt;/code>&lt;/li>
&lt;li>&lt;code>1&lt;/code> if &lt;code>ways == 1&lt;/code>&lt;/li>
&lt;li>&lt;code>2&lt;/code> if &lt;code>ways &amp;gt; 1&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>A &lt;strong>rooted tree&lt;/strong> is a tree that has a single root node, and all edges are oriented to be outgoing from the root.&lt;/p>
&lt;p>An &lt;strong>ancestor&lt;/strong> of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.&lt;/p></description></item><item><title>LeetCode 6007. 数组的最大与和</title><link>https://tategotoazarasi.github.io/post/maximum-and-sum-of-array/</link><pubDate>Sun, 13 Feb 2022 15:34:49 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/maximum-and-sum-of-array/</guid><description>&lt;p>给你一个长度为  &lt;code>n&lt;/code>  的整数数组  &lt;code>nums&lt;/code>  和一个整数  &lt;code>numSlots&lt;/code> ，满足&lt;code>2 * numSlots &amp;gt;= n&lt;/code> 。总共有  &lt;code>numSlots&lt;/code>  个篮子，编号为  &lt;code>1&lt;/code>  到  &lt;code>numSlots&lt;/code> 。&lt;/p>
&lt;p>你需要把所有  &lt;code>n&lt;/code>  个整数分到这些篮子中，且每个篮子 &lt;strong>至多&lt;/strong>  有 2 个整数。一种分配方案的 &lt;strong>与和&lt;/strong>  定义为每个数与它所在篮子编号的 &lt;strong>按位与运算&lt;/strong>  结果之和。&lt;/p>
&lt;ul>
&lt;li>比方说，将数字  &lt;code>[1, 3]&lt;/code>  放入篮子  &lt;strong>&lt;em>&lt;code>1&lt;/code>&lt;/em>&lt;/strong>  中，&lt;code>[4, 6]&lt;/code> 放入篮子  &lt;strong>&lt;em>&lt;code>2&lt;/code>&lt;/em>&lt;/strong>  中，这个方案的与和为  &lt;code>(1 AND 1) + (3 AND 1) + (4 AND 2) + (6 AND 2) = 1 + 1 + 0 + 2 = 4&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;p>请你返回将 &lt;code>nums&lt;/code>  中所有数放入 &lt;code>numSlots&lt;/code>  个篮子中的最大与和。&lt;/p></description></item><item><title>LeetCode 262. Trips and Users</title><link>https://tategotoazarasi.github.io/post/trips-and-users/</link><pubDate>Fri, 11 Feb 2022 11:04:37 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/trips-and-users/</guid><description>&lt;p>Table: &lt;code>Trips&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>client_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>driver_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>city_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>status&lt;/td>
&lt;td>enum&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>request_at&lt;/td>
&lt;td>date&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id is the primary key for this table.
The table holds all taxi trips. Each trip has a unique id, while client_id and driver_id are foreign keys to the users_id at the Users table.
Status is an ENUM type of (&amp;lsquo;completed&amp;rsquo;, &amp;lsquo;cancelled_by_driver&amp;rsquo;, &amp;lsquo;cancelled_by_client&amp;rsquo;).&lt;/p>
&lt;p>Table: &lt;code>Users&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>users_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>banned&lt;/td>
&lt;td>enum&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>role&lt;/td>
&lt;td>enum&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>users_id is the primary key for this table.
The table holds all users. Each user has a unique users_id, and role is an ENUM type of (&amp;lsquo;client&amp;rsquo;, &amp;lsquo;driver&amp;rsquo;, &amp;lsquo;partner&amp;rsquo;).
banned is an ENUM type of (&amp;lsquo;Yes&amp;rsquo;, &amp;lsquo;No&amp;rsquo;).&lt;/p>
&lt;p>The &lt;strong>cancellation rate&lt;/strong> is computed by dividing the
number of canceled (by client or driver) requests with unbanned users by
the total number of requests with unbanned users on that day.&lt;/p>
&lt;p>Write a SQL query to find the &lt;strong>cancellation rate&lt;/strong> of requests with unbanned users (&lt;strong>both client and driver must not be banned&lt;/strong>) each day between &lt;code>&amp;quot;2013-10-01&amp;quot;&lt;/code> and &lt;code>&amp;quot;2013-10-03&amp;quot;&lt;/code>. Round &lt;code>Cancellation Rate&lt;/code> to &lt;strong>two decimal&lt;/strong> points.&lt;/p>
&lt;p>Return the result table in &lt;strong>any order&lt;/strong>.&lt;/p></description></item><item><title>LeetCode 185. Department Top Three Salaries</title><link>https://tategotoazarasi.github.io/post/department-top-three-salaries/</link><pubDate>Tue, 08 Feb 2022 18:41:34 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/department-top-three-salaries/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">Create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">If&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">If&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Department&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Truncate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Joe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;85000&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Henry&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;80000&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Sam&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;60000&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;4&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Max&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;90000&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;5&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Janet&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;69000&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;6&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Randy&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;85000&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salary&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">departmentId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;7&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Will&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;70000&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Truncate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Department&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Department&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;IT&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Department&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Sales&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Table: &lt;code>Employee&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>salary&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>departmentId&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id is the primary key column for this table.
departmentId is a foreign key of the ID from the &lt;code>Department&lt;/code> table.
Each row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.&lt;/p>
&lt;p>Table: &lt;code>Department&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id is the primary key column for this table.
Each row of this table indicates the ID of a department and its name.&lt;/p>
&lt;p>A company&amp;rsquo;s executives are interested in seeing who earns the most money in each of the company&amp;rsquo;s departments. A &lt;strong>high earner&lt;/strong> in a department is an employee who has a salary in the &lt;strong>top three unique&lt;/strong> salaries for that department.&lt;/p>
&lt;p>Write an SQL query to find the employees who are &lt;strong>high earners&lt;/strong> in each of the departments.&lt;/p>
&lt;p>Return the result table &lt;strong>in any order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>AcWing 4298. 搭档</title><link>https://tategotoazarasi.github.io/post/acwing4298/</link><pubDate>Sat, 05 Feb 2022 21:34:54 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/acwing4298/</guid><description>&lt;p>有 n 个男孩，每个人的魅力值依次为 a1,a2,…,an.&lt;/p>
&lt;p>有 m 个女孩，每个人的魅力值依次为 b1,b2,…,bm。&lt;/p>
&lt;p>学校举办舞会，希望选出尽可能多的男女搭档参加。&lt;/p>
&lt;p>已知，当一对男女的魅力值相差不超过 1 时，他们才会愿意组成搭档。&lt;/p>
&lt;p>请问，最多可以&lt;strong>同时&lt;/strong>凑出多少对搭档参加舞会。&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>不能男男配对或女女配对。&lt;/li>
&lt;li>每个男生最多只能和一个女生配对，反之亦然。&lt;/li>
&lt;/ul></description></item><item><title>LeetCode 5995. 字符串分组</title><link>https://tategotoazarasi.github.io/post/groups-of-strings/</link><pubDate>Sun, 30 Jan 2022 16:22:21 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/groups-of-strings/</guid><description>&lt;p>给你一个下标从  &lt;strong>0&lt;/strong> 开始的字符串数组  &lt;code>words&lt;/code> 。每个字符串都只包含 &lt;strong>小写英文字母&lt;/strong> 。&lt;code>words&lt;/code>  中任意一个子串中，每个字母都至多只出现一次。&lt;/p>
&lt;p>如果通过以下操作之一，我们可以从 &lt;code>s1&lt;/code>  的字母集合得到 &lt;code>s2&lt;/code>  的字母集合，那么我们称这两个字符串为 &lt;strong>关联的&lt;/strong> ：&lt;/p>
&lt;ul>
&lt;li>往  &lt;code>s1&lt;/code>  的字母集合中添加一个字母。&lt;/li>
&lt;li>从  &lt;code>s1&lt;/code>  的字母集合中删去一个字母。&lt;/li>
&lt;li>将 &lt;code>s1&lt;/code>  中的一个字母替换成另外任意一个字母（也可以替换为这个字母本身）。&lt;/li>
&lt;/ul>
&lt;p>数组  &lt;code>words&lt;/code>  可以分为一个或者多个无交集的 &lt;strong>组&lt;/strong> 。一个字符串与一个组如果满足以下 &lt;strong>任一&lt;/strong>  条件，它就属于这个组：&lt;/p>
&lt;ul>
&lt;li>它与组内 &lt;strong>至少&lt;/strong>  一个其他字符串关联。&lt;/li>
&lt;li>它是这个组中 &lt;strong>唯一&lt;/strong>  的字符串。&lt;/li>
&lt;/ul>
&lt;p>注意，你需要确保分好组后，一个组内的任一字符串与其他组的字符串都不关联。可以证明在这个条件下，分组方案是唯一的。&lt;/p>
&lt;p>请你返回一个长度为 &lt;code>2&lt;/code>  的数组  &lt;code>ans&lt;/code> ：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ans[0]&lt;/code>  是  &lt;code>words&lt;/code>  分组后的  &lt;strong>总组数&lt;/strong> 。&lt;/li>
&lt;li>&lt;code>ans[1]&lt;/code>  是字符串数目最多的组所包含的字符串数目。&lt;/li>
&lt;/ul></description></item><item><title>AcWing 4217. 机器人移动</title><link>https://tategotoazarasi.github.io/post/acwing4217/</link><pubDate>Sat, 29 Jan 2022 20:41:54 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/acwing4217/</guid><description>&lt;p>在一个无限大的二维平面上有一个机器人。&lt;/p>
&lt;p>初始时，机器人位于点 (0,0)。&lt;/p>
&lt;p>机器人可以执行四种行动指令：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>U&lt;/code> — 从 (x,y)移动到 (x,y+1)；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>D&lt;/code> — 从 (x,y)移动到 (x,y−1)；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>L&lt;/code> — 从 (x,y)移动到 (x−1,y)；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>R&lt;/code> — 从 (x,y)移动到 (x+1,y)。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>给定一个长度为 n 的指令序列，指令编号 1∼n，机器人将按顺序依次执行序列中的每个行动指令。&lt;/p>
&lt;p>我们希望机器人最终抵达目标地点 (a,b)。&lt;/p>
&lt;p>为了达成这一目的，我们可能需要对指令序列进行修改。&lt;/p>
&lt;p>每次修改可以选择其中一个指令，并将其&lt;strong>替换&lt;/strong>为四种指令之一。&lt;/p>
&lt;p>注意，只能对序列中的指令进行替换，不得随意删除指令或添加额外指令。&lt;/p>
&lt;p>不妨设经过修改的指令中，编号最小的指令编号为 minID，编号最大的指令编号为 maxID。&lt;/p>
&lt;p>我们定义修改成本为 maxID−minID+1。&lt;/p>
&lt;p>例如，将 &lt;code>RRRRRRR&lt;/code> 修改为 &lt;code>RLRRLRL&lt;/code>，则编号为 2,5,7 的指令经过了修改，修改成本为 7−2+1=6。&lt;/p>
&lt;p>请你计算，为了使得机器人能够最终抵达目标点 (a,b)，所需花费的最小修改成本。&lt;/p>
&lt;p>如果不需要对序列进行修改，则成本为 0。&lt;/p></description></item><item><title>AcWing 4214. 三元组</title><link>https://tategotoazarasi.github.io/post/acwing4214/</link><pubDate>Sat, 22 Jan 2022 21:32:54 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/acwing4214/</guid><description>&lt;p>给定两个长度为 n 的整数序列 \(s_1,s_2,…,s_n\) 和 \(c_1,c_2,…,c_n\)。&lt;/p>
&lt;p>请你找到一个三元组 (i,j,k)，满足以下所有条件：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>i&amp;lt;j&amp;lt;k&lt;/p>
&lt;/li>
&lt;li>
&lt;p>\(s_i&amp;lt;s_j&amp;lt;s_k\)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>\(c_i+c_j+c_k\)尽可能小&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>输出 \(c_i+c_j+c_k\) 的最小可能值。&lt;/p></description></item><item><title>LeetCode 5983. 同时运行 N 台电脑的最长时间</title><link>https://tategotoazarasi.github.io/post/maximum-running-time-of-n-computers/</link><pubDate>Sun, 16 Jan 2022 12:20:00 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/maximum-running-time-of-n-computers/</guid><description>&lt;p>你有  &lt;code>n&lt;/code>  台电脑。给你整数  &lt;code>n&lt;/code>  和一个下标从 &lt;strong>0&lt;/strong>  开始的整数数组  &lt;code>batteries&lt;/code> ，其中第  &lt;code>i&lt;/code>  个电池可以让一台电脑 &lt;strong>运行&lt;/strong> &lt;code>batteries[i]&lt;/code>  分钟。你想使用这些电池让  &lt;strong>全部&lt;/strong> &lt;code>n&lt;/code>  台电脑 &lt;strong>同时&lt;/strong>  运行。&lt;/p>
&lt;p>一开始，你可以给每台电脑连接 &lt;strong>至多一个电池&lt;/strong> 。然后在任意整数时刻，你都可以将一台电脑与它的电池断开连接，并连接另一个电池，你可以进行这个操作 &lt;strong>任意次&lt;/strong> 。新连接的电池可以是一个全新的电池，也可以是别的电脑用过的电池。断开连接和连接新的电池不会花费任何时间。&lt;/p>
&lt;p>注意，你不能给电池充电。&lt;/p>
&lt;p>请你返回你可以让 &lt;code>n&lt;/code>  台电脑同时运行的 &lt;strong>最长&lt;/strong>  分钟数。&lt;/p></description></item><item><title>AcWing 4211. 序列重排</title><link>https://tategotoazarasi.github.io/post/acwing4211/</link><pubDate>Sat, 15 Jan 2022 20:42:10 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/acwing4211/</guid><description>&lt;p>给定一个长度为 n 的整数序列 \(a_1,a_2,…,a_n\)。&lt;/p>
&lt;p>请你对序列进行重新排序（也可以保持原序列），要求新序列满足每个元素（第 1 个除外）都恰好是前一个元素的两倍或前一个元素的三分之一。&lt;/p>
&lt;p>保证输入一定有解。&lt;/p></description></item><item><title>LeetCode 1036. 逃离大迷宫</title><link>https://tategotoazarasi.github.io/post/escape-a-large-maze/</link><pubDate>Tue, 11 Jan 2022 16:08:56 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/escape-a-large-maze/</guid><description>&lt;p>在一个 \(10^6 \times 10^6\) 的网格中，每个网格上方格的坐标为 &lt;code>(x, y)&lt;/code> 。&lt;/p>
&lt;p>现在从源方格 \(source = [s_x, s_y]\) 开始出发，意图赶往目标方格 \(target = [t_x, t_y]\) 。数组 &lt;code>blocked&lt;/code> 是封锁的方格列表，其中每个 \(blocked[i] = [x_i, y_i]\) 表示坐标为 \((x_i, y_i)\) 的方格是禁止通行的。&lt;/p>
&lt;p>每次移动，都可以走到网格中在四个方向上相邻的方格，只要该方格 &lt;strong>不&lt;/strong> 在给出的封锁列表 &lt;code>blocked&lt;/code> 上。同时，不允许走出网格。&lt;/p>
&lt;p>只有在可以通过一系列的移动从源方格 &lt;code>source&lt;/code> 到达目标方格 &lt;code>target&lt;/code> 时才返回 &lt;code>true&lt;/code>。否则，返回 &lt;code>false&lt;/code>。&lt;/p></description></item><item><title>LeetCode 913. 猫和老鼠</title><link>https://tategotoazarasi.github.io/post/cat-and-mouse/</link><pubDate>Tue, 04 Jan 2022 22:08:53 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/cat-and-mouse/</guid><description>&lt;p>两位玩家分别扮演猫和老鼠，在一张 &lt;strong>无向&lt;/strong> 图上进行游戏，两人轮流行动。&lt;/p>
&lt;p>图的形式是：&lt;code>graph[a]&lt;/code> 是一个列表，由满足 &lt;code>ab&lt;/code> 是图中的一条边的所有节点 &lt;code>b&lt;/code> 组成。&lt;/p>
&lt;p>老鼠从节点 &lt;code>1&lt;/code> 开始，第一个出发；猫从节点 &lt;code>2&lt;/code> 开始，第二个出发。在节点 &lt;code>0&lt;/code> 处有一个洞。&lt;/p>
&lt;p>在每个玩家的行动中，他们 &lt;strong>必须&lt;/strong> 沿着图中与所在当前位置连通的一条边移动。例如，如果老鼠在节点 &lt;code>1&lt;/code> ，那么它必须移动到 &lt;code>graph[1]&lt;/code> 中的任一节点。&lt;/p>
&lt;p>此外，猫无法移动到洞中（节点 &lt;code>0&lt;/code>）。&lt;/p>
&lt;p>然后，游戏在出现以下三种情形之一时结束：&lt;/p>
&lt;ul>
&lt;li>如果猫和老鼠出现在同一个节点，猫获胜。&lt;/li>
&lt;li>如果老鼠到达洞中，老鼠获胜。&lt;/li>
&lt;li>如果某一位置重复出现（即，玩家的位置和移动顺序都与上一次行动相同），游戏平局。&lt;/li>
&lt;/ul>
&lt;p>给你一张图 &lt;code>graph&lt;/code> ，并假设两位玩家都都以最佳状态参与游戏：&lt;/p>
&lt;ul>
&lt;li>如果老鼠获胜，则返回 &lt;code>1&lt;/code>；&lt;/li>
&lt;li>如果猫获胜，则返回 &lt;code>2&lt;/code>；&lt;/li>
&lt;li>如果平局，则返回 &lt;code>0&lt;/code> 。&lt;/li>
&lt;/ul></description></item><item><title>LeetCode 5970. 参加会议的最多员工数</title><link>https://tategotoazarasi.github.io/post/maximum-employees-to-be-invited-to-a-meeting/</link><pubDate>Sun, 02 Jan 2022 17:24:01 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/maximum-employees-to-be-invited-to-a-meeting/</guid><description>&lt;p>一个公司准备组织一场会议，邀请名单上有  &lt;code>n&lt;/code>  位员工。公司准备了一张 &lt;strong>圆形&lt;/strong>  的桌子，可以坐下 &lt;strong>任意数目&lt;/strong>  的员工。&lt;/p>
&lt;p>员工编号为 &lt;code>0&lt;/code>  到 &lt;code>n - 1&lt;/code> 。每位员工都有一位 &lt;strong>喜欢&lt;/strong>  的员工，每位员工  &lt;strong>当且仅当&lt;/strong>  他被安排在喜欢员工的旁边，他才会参加会议。每位员工喜欢的员工 &lt;strong>不会&lt;/strong>  是他自己。&lt;/p>
&lt;p>给你一个下标从 &lt;strong>0&lt;/strong>  开始的整数数组  &lt;code>favorite&lt;/code> ，其中  &lt;code>favorite[i]&lt;/code>  表示第  &lt;code>i&lt;/code>  位员工喜欢的员工。请你返回参加会议的  &lt;strong>最多员工数目&lt;/strong> 。&lt;/p></description></item><item><title>LeetCode 472. 连接词</title><link>https://tategotoazarasi.github.io/post/concatenated-words/</link><pubDate>Tue, 28 Dec 2021 15:56:48 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/concatenated-words/</guid><description>&lt;p>给你一个 &lt;strong>不含重复&lt;/strong> 单词的字符串数组 &lt;code>words&lt;/code> ，请你找出并返回 &lt;code>words&lt;/code> 中的所有 &lt;strong>连接词&lt;/strong> 。&lt;/p>
&lt;p>&lt;strong>连接词&lt;/strong> 定义为：一个完全由给定数组中的至少两个较短单词组成的字符串。&lt;/p></description></item></channel></rss>