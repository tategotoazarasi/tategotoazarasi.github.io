<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>简单 on Harp Seal Pup Nursery and Caring Center</title><link>https://tategotoazarasi.github.io/tags/%E7%AE%80%E5%8D%95/</link><description>Recent content in 简单 on Harp Seal Pup Nursery and Caring Center</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 07 Apr 2022 17:04:33 +0800</lastBuildDate><atom:link href="https://tategotoazarasi.github.io/tags/%E7%AE%80%E5%8D%95/index.xml" rel="self" type="application/rss+xml"/><item><title>AcWing 790. 数的三次方根</title><link>https://tategotoazarasi.github.io/post/acwing790/</link><pubDate>Thu, 07 Apr 2022 17:04:33 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/acwing790/</guid><description>&lt;p>给定一个浮点数 n，求它的三次方根。&lt;/p></description></item><item><title>AcWing 785. 快速排序</title><link>https://tategotoazarasi.github.io/post/acwing785/</link><pubDate>Thu, 07 Apr 2022 17:04:23 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/acwing785/</guid><description>&lt;p>给定你一个长度为 n 的整数数列。&lt;/p>
&lt;p>请你使用快速排序对这个数列按照从小到大进行排序。&lt;/p>
&lt;p>并将排好序的数列按顺序输出。&lt;/p></description></item><item><title>AcWing 788. 逆序对的数量</title><link>https://tategotoazarasi.github.io/post/acwing788/</link><pubDate>Thu, 07 Apr 2022 17:04:13 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/acwing788/</guid><description>&lt;p>给定一个长度为 n 的整数数列，请你计算数列中的逆序对的数量。&lt;/p>
&lt;p>逆序对的定义如下：对于数列的第 i 个和第 j 个元素，如果满足 i&amp;lt;j 且 a[i]&amp;gt;a[j]，则其为一个逆序对；否则不是。&lt;/p></description></item><item><title>LeetCode 608. Tree Node</title><link>https://tategotoazarasi.github.io/post/tree-node/</link><pubDate>Thu, 07 Apr 2022 12:05:45 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/tree-node/</guid><description>&lt;p>Table: &lt;code>Tree&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>p_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id is the primary key column for this table.
Each row of this table contains information about the id of a node and the id of its parent node in a tree.
The given structure is always a valid tree.&lt;/p>
&lt;p>Each node in the tree can be one of three types:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ldquo;Leaf&amp;rdquo;&lt;/strong>: if the node is a leaf node.&lt;/li>
&lt;li>&lt;strong>&amp;ldquo;Root&amp;rdquo;&lt;/strong>: if the node is the root of the tree.&lt;/li>
&lt;li>&lt;strong>&amp;ldquo;Inner&amp;rdquo;&lt;/strong>: If the node is neither a leaf node nor a root node.&lt;/li>
&lt;/ul>
&lt;p>Write an SQL query to report the type of each node in the tree.&lt;/p>
&lt;p>Return the result table &lt;strong>ordered&lt;/strong> by &lt;code>id&lt;/code> &lt;strong>in ascending order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 1795. Rearrange Products Table</title><link>https://tategotoazarasi.github.io/post/rearrange-products-table/</link><pubDate>Thu, 07 Apr 2022 12:05:35 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/rearrange-products-table/</guid><description>&lt;p>Table: &lt;code>Products&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>product_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>store1&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>store2&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>store3&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>product_id is the primary key for this table.
Each row in this table indicates the product&amp;rsquo;s price in 3 different stores: store1, store2, and store3.
If the product is not available in a store, the price will be null in that store&amp;rsquo;s column.&lt;/p>
&lt;p>Write an SQL query to rearrange the &lt;code>Products&lt;/code> table so that each row has &lt;code>(product_id, store, price)&lt;/code>. If a product is not available in a store, do &lt;strong>not&lt;/strong> include a row with that &lt;code>product_id&lt;/code> and &lt;code>store&lt;/code> combination in the result table.&lt;/p>
&lt;p>Return the result table in &lt;strong>any order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 1965. Employees With Missing Information</title><link>https://tategotoazarasi.github.io/post/employees-with-missing-information/</link><pubDate>Thu, 07 Apr 2022 12:05:28 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/employees-with-missing-information/</guid><description>&lt;p>Table: &lt;code>Employees&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>employee_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>employee_id is the primary key for this table.
Each row of this table indicates the name of the employee whose ID is employee_id.&lt;/p>
&lt;p>Table: &lt;code>Salaries&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>employee_id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>salary&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>employee_id is the primary key for this table.
Each row of this table indicates the salary of the employee whose ID is employee_id.&lt;/p>
&lt;p>Write an SQL query to report the IDs of all the employees with &lt;strong>missing information&lt;/strong>. The information of an employee is missing if:&lt;/p>
&lt;ul>
&lt;li>The employee&amp;rsquo;s &lt;strong>name&lt;/strong> is missing, or&lt;/li>
&lt;li>The employee&amp;rsquo;s &lt;strong>salary&lt;/strong> is missing.&lt;/li>
&lt;/ul>
&lt;p>Return the result table ordered by &lt;code>employee_id&lt;/code> &lt;strong>in ascending order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>AcWing 3745. 牛的学术圈 I</title><link>https://tategotoazarasi.github.io/post/acwing3745/</link><pubDate>Thu, 17 Mar 2022 16:37:13 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/acwing3745/</guid><description>&lt;p>由于对计算机科学的热爱，以及有朝一日成为 「Bessie 博士」的诱惑，奶牛 Bessie 开始攻读计算机科学博士学位。&lt;/p>
&lt;p>经过一段时间的学术研究，她已经发表了 N 篇论文，并且她的第 i 篇论文得到了来自其他研究文献的 ci 次引用。&lt;/p>
&lt;p>Bessie 听说学术成就可以用 h 指数来衡量。&lt;/p>
&lt;p>h 指数等于使得研究员有至少 h 篇引用次数不少于 h 的论文的最大整数 h。&lt;/p>
&lt;p>例如，如果一名研究员有 4 篇论文，引用次数分别为 (1,100,2,3)，则 h 指数为 2，然而若引用次数为 (1,100,3,3) 则 h 指数将会是 3。&lt;/p>
&lt;p>为了提升她的 h 指数，Bessie 计划写一篇综述，并引用一些她曾经写过的论文。&lt;/p>
&lt;p>由于页数限制，她至多可以在这篇综述中引用 L 篇论文，并且她只能引用每篇她的论文至多一次。&lt;/p>
&lt;p>请帮助 Bessie 求出在写完这篇综述后她可以达到的最大 h 指数。&lt;/p>
&lt;p>注意 Bessie 的导师可能会告知她纯粹为了提升 h 指数而写综述存在违反学术道德的嫌疑；我们不建议其他学者模仿 Bessie 的行为。&lt;/p></description></item><item><title>AcWing 36. 合并两个排序的链表</title><link>https://tategotoazarasi.github.io/post/acwing36/</link><pubDate>Mon, 07 Mar 2022 15:40:12 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/acwing36/</guid><description>&lt;p>输入两个递增排序的链表，合并这两个链表并使新链表中的结点仍然是按照递增排序的。&lt;/p></description></item><item><title>AcWing 66. 两个链表的第一个公共结点</title><link>https://tategotoazarasi.github.io/post/acwing66/</link><pubDate>Sun, 06 Mar 2022 16:18:54 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/acwing66/</guid><description>&lt;p>输入两个链表，找出它们的第一个公共结点。&lt;/p>
&lt;p>当不存在公共节点时，返回空节点。&lt;/p></description></item><item><title>AcWing 28. 在O(1)时间删除链表结点</title><link>https://tategotoazarasi.github.io/post/acwing28/</link><pubDate>Sun, 06 Mar 2022 16:15:54 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/acwing28/</guid><description>&lt;p>给定单向链表的一个节点指针，定义一个函数在 O(1)时间删除该结点。&lt;/p>
&lt;p>假设链表一定存在，并且该节点一定不是尾节点。&lt;/p></description></item><item><title>LeetCode 258. Add Digits</title><link>https://tategotoazarasi.github.io/post/add-digits/</link><pubDate>Thu, 03 Mar 2022 13:13:27 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/add-digits/</guid><description>&lt;p>Given an integer &lt;code>num&lt;/code>, repeatedly add all its digits until the result has only one digit, and return it.&lt;/p></description></item><item><title>LeetCode 1179. Reformat Department Table</title><link>https://tategotoazarasi.github.io/post/reformat-department-table/</link><pubDate>Sat, 19 Feb 2022 14:31:05 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/reformat-department-table/</guid><description>&lt;p>Table: &lt;code>Department&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>revenue&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>month&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>(id, month) is the primary key of this table.
The table has information about the revenue of each department per month.
The month has values in [&amp;ldquo;Jan&amp;rdquo;,&amp;ldquo;Feb&amp;rdquo;,&amp;ldquo;Mar&amp;rdquo;,&amp;ldquo;Apr&amp;rdquo;,&amp;ldquo;May&amp;rdquo;,&amp;ldquo;Jun&amp;rdquo;,&amp;ldquo;Jul&amp;rdquo;,&amp;ldquo;Aug&amp;rdquo;,&amp;ldquo;Sep&amp;rdquo;,&amp;ldquo;Oct&amp;rdquo;,&amp;ldquo;Nov&amp;rdquo;,&amp;ldquo;Dec&amp;rdquo;].&lt;/p>
&lt;p>Write an SQL query to reformat the table such that there is a department id column and a revenue column &lt;strong>for each month&lt;/strong>.&lt;/p>
&lt;p>Return the result table in &lt;strong>any order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 627. Swap Salary</title><link>https://tategotoazarasi.github.io/post/swap-salary/</link><pubDate>Fri, 18 Feb 2022 10:09:38 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/swap-salary/</guid><description>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sex&lt;/td>
&lt;td>ENUM&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>salary&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id is the primary key for this table.
The sex column is ENUM value of type (&amp;rsquo;m&amp;rsquo;, &amp;lsquo;f&amp;rsquo;).
The table contains information about an employee.&lt;/p>
&lt;p>Write an SQL query to swap all &lt;code>'f'&lt;/code> and &lt;code>'m'&lt;/code> values (i.e., change all &lt;code>'f'&lt;/code> values to &lt;code>'m'&lt;/code> and vice versa) with a &lt;strong>single update statement&lt;/strong> and no intermediate temporary tables.&lt;/p>
&lt;p>Note that you must write a single update statement, &lt;strong>do not&lt;/strong> write any select statement for this problem.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 197. Rising Temperature</title><link>https://tategotoazarasi.github.io/post/rising-temperature/</link><pubDate>Thu, 10 Feb 2022 11:05:17 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/rising-temperature/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">Create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">If&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Weather&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">recordDate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">date&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">temperature&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Truncate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Weather&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Weather&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">recordDate&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">temperature&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;2015-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;10&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Weather&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">recordDate&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">temperature&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;2015-01-02&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;25&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Weather&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">recordDate&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">temperature&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;2015-01-03&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;20&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Weather&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">recordDate&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">temperature&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;4&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;2015-01-04&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;30&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Table: &lt;code>Weather&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>recordDate&lt;/td>
&lt;td>date&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>temperature&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id is the primary key for this table.
This table contains information about the temperature on a certain day.&lt;/p>
&lt;p>Write an SQL query to find all dates&amp;rsquo; &lt;code>Id&lt;/code> with higher temperatures compared to its previous dates (yesterday).&lt;/p>
&lt;p>Return the result table in &lt;strong>any order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 196. Delete Duplicate Emails</title><link>https://tategotoazarasi.github.io/post/delete-duplicate-emails/</link><pubDate>Wed, 09 Feb 2022 15:54:42 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/delete-duplicate-emails/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">Create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">If&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Email&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Truncate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;john@example.com&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;bob@example.com&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;john@example.com&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Table: &lt;code>Person&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>email&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id is the primary key column for this table.
Each row of this table contains an email. The emails will not contain uppercase letters.&lt;/p>
&lt;p>Write an SQL query to &lt;strong>delete&lt;/strong> all the duplicate emails, keeping only one unique email with the smallest &lt;code>id&lt;/code>. Note that you are supposed to write a &lt;code>DELETE&lt;/code> statement and not a &lt;code>SELECT&lt;/code> one.&lt;/p>
&lt;p>Return the result table in &lt;strong>any order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 182. Duplicate Emails</title><link>https://tategotoazarasi.github.io/post/duplicate-emails/</link><pubDate>Sat, 05 Feb 2022 10:57:27 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/duplicate-emails/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">Create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">If&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Truncate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;a@b.com&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;c@d.com&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;a@b.com&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Table: &lt;code>Person&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>email&lt;/td>
&lt;td>varchar&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>id is the primary key column for this table.
Each row of this table contains an email. The emails will not contain uppercase letters.&lt;/p>
&lt;p>Write an SQL query to report all the duplicate emails.&lt;/p>
&lt;p>Return the result table in &lt;strong>any order&lt;/strong>.&lt;/p>
&lt;p>The query result format is in the following example.&lt;/p></description></item><item><title>LeetCode 1763. 最长的美好子字符串</title><link>https://tategotoazarasi.github.io/post/longest-nice-substring/</link><pubDate>Tue, 01 Feb 2022 19:52:49 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/longest-nice-substring/</guid><description>&lt;p>当一个字符串 &lt;code>s&lt;/code>  包含的每一种字母的大写和小写形式 &lt;strong>同时&lt;/strong>  出现在 &lt;code>s&lt;/code>  中，就称这个字符串  &lt;code>s&lt;/code>  是 &lt;strong>美好&lt;/strong> 字符串。比方说，&lt;code>&amp;quot;abABB&amp;quot;&lt;/code>  是美好字符串，因为  &lt;code>'A'&lt;/code> 和  &lt;code>'a'&lt;/code>  同时出现了，且  &lt;code>'B'&lt;/code> 和  &lt;code>'b'&lt;/code>  也同时出现了。然而，&lt;code>&amp;quot;abA&amp;quot;&lt;/code>  不是美好字符串因为  &lt;code>'b'&lt;/code>  出现了，而  &lt;code>'B'&lt;/code>  没有出现。&lt;/p>
&lt;p>给你一个字符串  &lt;code>s&lt;/code> ，请你返回  &lt;code>s&lt;/code>  最长的  &lt;strong>美好子字符串&lt;/strong> 。如果有多个答案，请你返回  &lt;strong>最早&lt;/strong>  出现的一个。如果不存在美好子字符串，请你返回一个空字符串。&lt;/p></description></item><item><title>AcWing 1913. 公平摄影</title><link>https://tategotoazarasi.github.io/post/acwing1913/</link><pubDate>Thu, 20 Jan 2022 12:57:54 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/acwing1913/</guid><description>&lt;p>农夫约翰的 N 头奶牛站在一维长围栏的不同位置。&lt;/p>
&lt;p>第 i 头牛位于位置 xi，其所属品种为 bi（根西岛牛或荷斯坦牛）。&lt;/p>
&lt;p>所有奶牛的位置各不相同。&lt;/p>
&lt;p>约翰想给一段连续区间内的奶牛拍摄一张照片，用来在乡村集市上展览。&lt;/p>
&lt;p>但是我们希望他所有品种的奶牛都能在照片中得到公平的展示。&lt;/p>
&lt;p>因此，他希望确保无论照片中出些哪些品种的奶牛，每种品种的奶牛在照片中的数量都必须相等。&lt;/p>
&lt;p>例如，一张照片中只包含荷斯坦牛是可以的，包含荷斯坦牛和根西岛牛各 27 头也没问题，但是包含 10 头荷斯坦牛和 9 头根西岛牛则不可以。&lt;/p>
&lt;p>请确定，约翰可以拍下的满足以上条件的照片的最大尺寸。&lt;/p>
&lt;p>照片的尺寸是指照片中奶牛最大和最小位置之间的差。&lt;/p>
&lt;p>约翰最终可能只拍下一头奶牛，这种情况下，照片尺寸为 0。&lt;/p></description></item><item><title>AcWing 1934. 贝茜放慢脚步</title><link>https://tategotoazarasi.github.io/post/acwing1934/</link><pubDate>Mon, 17 Jan 2022 15:51:30 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/acwing1934/</guid><description>&lt;p>奶牛贝茜正在参加冬季哞林匹克运动会的越野滑雪比赛。&lt;/p>
&lt;p>她以每秒 1 米的速度出发。&lt;/p>
&lt;p>但是，随着时间的推移，她变得越来越疲倦，她开始放慢脚步。&lt;/p>
&lt;p>每次放慢脚步，贝茜的速度都会降低：减速一次后，她以每秒 1/2 米的速度移动，减速两次后，则以每秒 1/3 米的速度移动，依此类推。&lt;/p>
&lt;p>你将被告知何时何地贝茜会减速。&lt;/p></description></item><item><title>AcWing 1978. 奶牛过马路</title><link>https://tategotoazarasi.github.io/post/acwing1978/</link><pubDate>Tue, 11 Jan 2022 16:08:30 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/acwing1978/</guid><description>&lt;p>每天，农夫约翰的 N 头奶牛都会穿过农场中间的马路。&lt;/p>
&lt;p>考虑约翰的农场在二维平面的地图，马路沿水平方向延伸，马路的一侧由直线 y=0 描述，另一侧由直线 y=1 描述。&lt;/p>
&lt;p>奶牛 i 从马路一侧的位置 \((a_i,0)\) 沿直线过马路到达另一侧的位置 \((b_i,1)\)。&lt;/p>
&lt;p>所有 \(a_i\) 互不相同，所有 \(b_i\) 互不相同。&lt;/p>
&lt;p>尽管他的奶牛们行动敏捷，他还是担心行动路径交叉的两头奶牛在过马路时发生碰撞。&lt;/p>
&lt;p>约翰认为，如果一头奶牛的行动路径没有跟其他任何奶牛的行动路径相交，则该奶牛是安全的。&lt;/p>
&lt;p>请帮助约翰计算安全奶牛的数量。&lt;/p></description></item><item><title>AcWing 1996. 打乱字母</title><link>https://tategotoazarasi.github.io/post/acwing1996/</link><pubDate>Sun, 09 Jan 2022 18:39:18 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/acwing1996/</guid><description>&lt;p>农夫约翰将按字典序排列的 N 头奶牛的名字列表贴在了牛棚的门上。&lt;/p>
&lt;p>每个奶牛的名字都由一个长度介于 1 到 20 之间的由小写字母构成的唯一字符串表示。&lt;/p>
&lt;p>麻烦制造者贝茜将列表中的奶牛名字重新排序打乱了列表。&lt;/p>
&lt;p>此外，她还对每头奶牛的名字中的字母顺序进行了重新排列（也可能保持不变）。&lt;/p>
&lt;p>给定修改过后的列表，请帮助约翰确定列表中的每个名字可能出现在原始列表中的最低和最高位置。&lt;/p></description></item><item><title>LintCode 295. 交集</title><link>https://tategotoazarasi.github.io/post/intersection/</link><pubDate>Sat, 08 Jan 2022 16:57:28 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/intersection/</guid><description>&lt;p>给定两个排序后的区间序列，序列内每个区间两两互不相交，返回两个序列相交的区间的下标&lt;/p></description></item><item><title>AcWing 2014. 岛</title><link>https://tategotoazarasi.github.io/post/acwing2014/</link><pubDate>Thu, 06 Jan 2022 10:51:11 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/acwing2014/</guid><description>&lt;p>每当下雨时，农夫约翰的田地总是被洪水淹没。&lt;/p>
&lt;p>由于田地不是完全水平的，所以一些地方充满水后，留下了许多被水隔开的“岛”。&lt;/p>
&lt;p>约翰的田地被描述为由 N 个连续高度值 H1,…,HN 指定的一维场景。&lt;/p>
&lt;p>假设该场景被无限高的围墙包围着，请考虑暴雨期间发生的情况：&lt;/p>
&lt;p>最低处首先被水覆盖，形成一些不连贯的岛，随着水位的不断上升，这些岛最终都会被覆盖。&lt;/p>
&lt;p>一旦水位等于一块田地的高度，那块田地就被认为位于水下。&lt;/p>
&lt;p>&lt;img src="https://tategotoazarasi.github.io/images/19_8c986a0cb5-fig_islands.png" alt="fig_islands.png">&lt;/p>
&lt;p>上图显示了一个示例：在左图中，我们只加入了刚好超过 1 单位的水，此时剩下 4 个岛（最大岛屿剩余数量），而在右图中，我们共加入了 7 单位的水，此时仅剩下 2 个岛。&lt;/p>
&lt;p>请计算，暴风雨期间我们能在某个时间点看到的最大岛屿数量。&lt;/p>
&lt;p>水会一直上升到所有田地都在水下。&lt;/p></description></item><item><title>AcWing 2041. 干草堆</title><link>https://tategotoazarasi.github.io/post/acwing2041/</link><pubDate>Mon, 03 Jan 2022 15:24:38 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/acwing2041/</guid><description>&lt;p>贝茜对她最近在农场周围造成的一切恶作剧感到抱歉，她同意帮助农夫约翰把一批新到的干草捆堆起来。&lt;/p>
&lt;p>开始时，共有 N 个空干草堆，编号 1∼N。&lt;/p>
&lt;p>约翰给贝茜下达了 K 个指令，每条指令的格式为 &lt;code>A B&lt;/code>，这意味着贝茜要在 A..B 范围内的每个干草堆的顶部添加一个新的干草捆。&lt;/p>
&lt;p>例如，如果贝茜收到指令 &lt;code>10 13&lt;/code>，则她应在干草堆 10,11,12,13 中各添加一个干草捆。&lt;/p>
&lt;p>在贝茜完成了所有指令后，约翰想知道 N 个干草堆的中值高度——也就是说，如果干草堆按照高度从小到大排列，位于中间的干草堆的高度。&lt;/p>
&lt;p>方便起见，N 一定是奇数，所以中间堆是唯一的。&lt;/p>
&lt;p>请帮助贝茜确定约翰问题的答案。&lt;/p></description></item><item><title>LeetCode 168. Excel表列名称</title><link>https://tategotoazarasi.github.io/post/excel-sheet-column-title/</link><pubDate>Sat, 25 Dec 2021 10:33:54 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/excel-sheet-column-title/</guid><description>&lt;p>给你一个整数 &lt;code>columnNumber&lt;/code> ，返回它在 Excel 表中相对应的列名称。&lt;/p></description></item><item><title>LeetCode 160. 相交链表</title><link>https://tategotoazarasi.github.io/post/intersection-of-two-linked-lists/</link><pubDate>Fri, 24 Dec 2021 08:29:53 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/intersection-of-two-linked-lists/</guid><description>&lt;p>给你两个单链表的头节点  &lt;code>headA&lt;/code> 和 &lt;code>headB&lt;/code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 &lt;code>null&lt;/code> 。&lt;/p>
&lt;p>图示两个链表在节点 &lt;code>c1&lt;/code> 开始相交 &lt;strong>：&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://tategotoazarasi.github.io/images/160_statement.png" alt="">&lt;/p>
&lt;p>题目数据 &lt;strong>保证&lt;/strong> 整个链式结构中不存在环。&lt;/p></description></item><item><title>LeetCode 119. 杨辉三角 II</title><link>https://tategotoazarasi.github.io/post/pascals-triangle-ii/</link><pubDate>Mon, 20 Dec 2021 11:13:00 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/pascals-triangle-ii/</guid><description>&lt;p>给定一个非负索引 &lt;code>rowIndex&lt;/code>，返回「杨辉三角」的第 &lt;code>rowIndex&lt;/code> 行。&lt;/p>
&lt;p>在「杨辉三角」中，每个数是它左上方和右上方的数的和。&lt;/p></description></item><item><title>LeetCode 28. 实现 strStr()</title><link>https://tategotoazarasi.github.io/post/implement-strstr/</link><pubDate>Tue, 07 Dec 2021 10:17:21 +0800</pubDate><guid>https://tategotoazarasi.github.io/post/implement-strstr/</guid><description>&lt;p>实现 &lt;a href="https://baike.baidu.com/item/strstr/811469">strStr()&lt;/a> 函数。&lt;/p>
&lt;p>给你两个字符串 &lt;code>haystack&lt;/code> 和 &lt;code>needle&lt;/code> ，请你在 &lt;code>haystack&lt;/code> 字符串中找出 &lt;code>needle&lt;/code> 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回 &lt;code>-1&lt;/code> 。&lt;/p></description></item></channel></rss>